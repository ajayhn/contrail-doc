
{
    "info": {
        "version": "1.0.0", 
        "title": "Contrail Configuration API"
    }, 
    "paths": {
        "/floating-ip-pools": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/FloatingIpPoolCreate"
                        }, 
                        "name": "floating-ip-pool", 
                        "in": "body"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ResourceListSummary"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Report all fields of resource.", 
                        "name": "detail", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "List of specific fields to report.", 
                        "name": "fields", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Count of resource", 
                        "name": "count", 
                        "in": "query"
                    }
                ]
            }
        }, 
        "/logical-interfaces": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/LogicalInterfaceCreate"
                        }, 
                        "name": "logical-interface", 
                        "in": "body"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ResourceListSummary"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Report all fields of resource.", 
                        "name": "detail", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "List of specific fields to report.", 
                        "name": "fields", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Count of resource", 
                        "name": "count", 
                        "in": "query"
                    }
                ]
            }
        }, 
        "/floating-ip-pool/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/FloatingIpPoolUpdate"
                        }, 
                        "name": "floating-ip-pool", 
                        "in": "body"
                    }
                ]
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/FloatingIpPoolRead"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }
        }, 
        "/loadbalancer-members": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/LoadbalancerMemberCreate"
                        }, 
                        "name": "loadbalancer-member", 
                        "in": "body"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ResourceListSummary"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Report all fields of resource.", 
                        "name": "detail", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "List of specific fields to report.", 
                        "name": "fields", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Count of resource", 
                        "name": "count", 
                        "in": "query"
                    }
                ]
            }
        }, 
        "/alias-ip-pools": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/AliasIpPoolCreate"
                        }, 
                        "name": "alias-ip-pool", 
                        "in": "body"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ResourceListSummary"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Report all fields of resource.", 
                        "name": "detail", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "List of specific fields to report.", 
                        "name": "fields", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Count of resource", 
                        "name": "count", 
                        "in": "query"
                    }
                ]
            }
        }, 
        "/global-system-configs": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/GlobalSystemConfigCreate"
                        }, 
                        "name": "global-system-config", 
                        "in": "body"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ResourceListSummary"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Report all fields of resource.", 
                        "name": "detail", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "List of specific fields to report.", 
                        "name": "fields", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Count of resource", 
                        "name": "count", 
                        "in": "query"
                    }
                ]
            }
        }, 
        "/loadbalancer-member/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/LoadbalancerMemberUpdate"
                        }, 
                        "name": "loadbalancer-member", 
                        "in": "body"
                    }
                ]
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/LoadbalancerMemberRead"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }
        }, 
        "/virtual-routers": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/VirtualRouterCreate"
                        }, 
                        "name": "virtual-router", 
                        "in": "body"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ResourceListSummary"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Report all fields of resource.", 
                        "name": "detail", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "List of specific fields to report.", 
                        "name": "fields", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Count of resource", 
                        "name": "count", 
                        "in": "query"
                    }
                ]
            }
        }, 
        "/service-appliances": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceApplianceCreate"
                        }, 
                        "name": "service-appliance", 
                        "in": "body"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ResourceListSummary"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Report all fields of resource.", 
                        "name": "detail", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "List of specific fields to report.", 
                        "name": "fields", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Count of resource", 
                        "name": "count", 
                        "in": "query"
                    }
                ]
            }
        }, 
        "/alias-ip/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/AliasIpUpdate"
                        }, 
                        "name": "alias-ip", 
                        "in": "body"
                    }
                ]
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/AliasIpRead"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }
        }, 
        "/namespaces": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/NamespaceCreate"
                        }, 
                        "name": "namespace", 
                        "in": "body"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ResourceListSummary"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Report all fields of resource.", 
                        "name": "detail", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "List of specific fields to report.", 
                        "name": "fields", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Count of resource", 
                        "name": "count", 
                        "in": "query"
                    }
                ]
            }
        }, 
        "/virtual-DNS-record/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/VirtualDnsRecordUpdate"
                        }, 
                        "name": "virtual-DNS-record", 
                        "in": "body"
                    }
                ]
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/VirtualDnsRecordRead"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }
        }, 
        "/discovery-service-assignment/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/DiscoveryServiceAssignmentUpdate"
                        }, 
                        "name": "discovery-service-assignment", 
                        "in": "body"
                    }
                ]
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/DiscoveryServiceAssignmentRead"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }
        }, 
        "/virtual-ip/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/VirtualIpUpdate"
                        }, 
                        "name": "virtual-ip", 
                        "in": "body"
                    }
                ]
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/VirtualIpRead"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }
        }, 
        "/customer-attachments": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/CustomerAttachmentCreate"
                        }, 
                        "name": "customer-attachment", 
                        "in": "body"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ResourceListSummary"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Report all fields of resource.", 
                        "name": "detail", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "List of specific fields to report.", 
                        "name": "fields", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Count of resource", 
                        "name": "count", 
                        "in": "query"
                    }
                ]
            }
        }, 
        "/network-policy/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/NetworkPolicyUpdate"
                        }, 
                        "name": "network-policy", 
                        "in": "body"
                    }
                ]
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/NetworkPolicyRead"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }
        }, 
        "/config-nodes": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ConfigNodeCreate"
                        }, 
                        "name": "config-node", 
                        "in": "body"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ResourceListSummary"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Report all fields of resource.", 
                        "name": "detail", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "List of specific fields to report.", 
                        "name": "fields", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Count of resource", 
                        "name": "count", 
                        "in": "query"
                    }
                ]
            }
        }, 
        "/global-vrouter-configs": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/GlobalVrouterConfigCreate"
                        }, 
                        "name": "global-vrouter-config", 
                        "in": "body"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ResourceListSummary"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Report all fields of resource.", 
                        "name": "detail", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "List of specific fields to report.", 
                        "name": "fields", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Count of resource", 
                        "name": "count", 
                        "in": "query"
                    }
                ]
            }
        }, 
        "/bgp-router/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/BgpRouterUpdate"
                        }, 
                        "name": "bgp-router", 
                        "in": "body"
                    }
                ]
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/BgpRouterRead"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }
        }, 
        "/virtual-network/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/VirtualNetworkUpdate"
                        }, 
                        "name": "virtual-network", 
                        "in": "body"
                    }
                ]
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/VirtualNetworkRead"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }
        }, 
        "/security-group/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/SecurityGroupUpdate"
                        }, 
                        "name": "security-group", 
                        "in": "body"
                    }
                ]
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/SecurityGroupRead"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }
        }, 
        "/analytics-nodes": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/AnalyticsNodeCreate"
                        }, 
                        "name": "analytics-node", 
                        "in": "body"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ResourceListSummary"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Report all fields of resource.", 
                        "name": "detail", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "List of specific fields to report.", 
                        "name": "fields", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Count of resource", 
                        "name": "count", 
                        "in": "query"
                    }
                ]
            }
        }, 
        "/floating-ip/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/FloatingIpUpdate"
                        }, 
                        "name": "floating-ip", 
                        "in": "body"
                    }
                ]
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/FloatingIpRead"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }
        }, 
        "/discovery-service-assignments": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/DiscoveryServiceAssignmentCreate"
                        }, 
                        "name": "discovery-service-assignment", 
                        "in": "body"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ResourceListSummary"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Report all fields of resource.", 
                        "name": "detail", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "List of specific fields to report.", 
                        "name": "fields", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Count of resource", 
                        "name": "count", 
                        "in": "query"
                    }
                ]
            }
        }, 
        "/interface-route-table/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/InterfaceRouteTableUpdate"
                        }, 
                        "name": "interface-route-table", 
                        "in": "body"
                    }
                ]
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/InterfaceRouteTableRead"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }
        }, 
        "/project/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/ProjectUpdate"
                        }, 
                        "name": "project", 
                        "in": "body"
                    }
                ]
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ProjectRead"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }
        }, 
        "/alias-ips": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/AliasIpCreate"
                        }, 
                        "name": "alias-ip", 
                        "in": "body"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ResourceListSummary"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Report all fields of resource.", 
                        "name": "detail", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "List of specific fields to report.", 
                        "name": "fields", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Count of resource", 
                        "name": "count", 
                        "in": "query"
                    }
                ]
            }
        }, 
        "/service-instance/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceInstanceUpdate"
                        }, 
                        "name": "service-instance", 
                        "in": "body"
                    }
                ]
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ServiceInstanceRead"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }
        }, 
        "/domain/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/DomainUpdate"
                        }, 
                        "name": "domain", 
                        "in": "body"
                    }
                ]
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/DomainRead"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }
        }, 
        "/logical-routers": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/LogicalRouterCreate"
                        }, 
                        "name": "logical-router", 
                        "in": "body"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ResourceListSummary"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Report all fields of resource.", 
                        "name": "detail", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "List of specific fields to report.", 
                        "name": "fields", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Count of resource", 
                        "name": "count", 
                        "in": "query"
                    }
                ]
            }
        }, 
        "/virtual-DNS/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/VirtualDnsUpdate"
                        }, 
                        "name": "virtual-DNS", 
                        "in": "body"
                    }
                ]
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/VirtualDnsRead"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }
        }, 
        "/virtual-DNS-records": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/VirtualDnsRecordCreate"
                        }, 
                        "name": "virtual-DNS-record", 
                        "in": "body"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ResourceListSummary"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Report all fields of resource.", 
                        "name": "detail", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "List of specific fields to report.", 
                        "name": "fields", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Count of resource", 
                        "name": "count", 
                        "in": "query"
                    }
                ]
            }
        }, 
        "/virtual-machines": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/VirtualMachineCreate"
                        }, 
                        "name": "virtual-machine", 
                        "in": "body"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ResourceListSummary"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Report all fields of resource.", 
                        "name": "detail", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "List of specific fields to report.", 
                        "name": "fields", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Count of resource", 
                        "name": "count", 
                        "in": "query"
                    }
                ]
            }
        }, 
        "/routing-instances": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/RoutingInstanceCreate"
                        }, 
                        "name": "routing-instance", 
                        "in": "body"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ResourceListSummary"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Report all fields of resource.", 
                        "name": "detail", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "List of specific fields to report.", 
                        "name": "fields", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Count of resource", 
                        "name": "count", 
                        "in": "query"
                    }
                ]
            }
        }, 
        "/service-health-checks": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceHealthCheckCreate"
                        }, 
                        "name": "service-health-check", 
                        "in": "body"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ResourceListSummary"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Report all fields of resource.", 
                        "name": "detail", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "List of specific fields to report.", 
                        "name": "fields", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Count of resource", 
                        "name": "count", 
                        "in": "query"
                    }
                ]
            }
        }, 
        "/global-system-config/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/GlobalSystemConfigUpdate"
                        }, 
                        "name": "global-system-config", 
                        "in": "body"
                    }
                ]
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/GlobalSystemConfigRead"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }
        }, 
        "/loadbalancer/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/LoadbalancerUpdate"
                        }, 
                        "name": "loadbalancer", 
                        "in": "body"
                    }
                ]
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/LoadbalancerRead"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }
        }, 
        "/instance-ip/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/InstanceIpUpdate"
                        }, 
                        "name": "instance-ip", 
                        "in": "body"
                    }
                ]
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/InstanceIpRead"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }
        }, 
        "/routing-policy/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/RoutingPolicyUpdate"
                        }, 
                        "name": "routing-policy", 
                        "in": "body"
                    }
                ]
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/RoutingPolicyRead"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }
        }, 
        "/subnet/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/SubnetUpdate"
                        }, 
                        "name": "subnet", 
                        "in": "body"
                    }
                ]
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/SubnetRead"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }
        }, 
        "/access-control-list/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/AccessControlListUpdate"
                        }, 
                        "name": "access-control-list", 
                        "in": "body"
                    }
                ]
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/AccessControlListRead"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }
        }, 
        "/provider-attachments": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ProviderAttachmentCreate"
                        }, 
                        "name": "provider-attachment", 
                        "in": "body"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ResourceListSummary"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Report all fields of resource.", 
                        "name": "detail", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "List of specific fields to report.", 
                        "name": "fields", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Count of resource", 
                        "name": "count", 
                        "in": "query"
                    }
                ]
            }
        }, 
        "/logical-interface/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/LogicalInterfaceUpdate"
                        }, 
                        "name": "logical-interface", 
                        "in": "body"
                    }
                ]
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/LogicalInterfaceRead"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }
        }, 
        "/config-node/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/ConfigNodeUpdate"
                        }, 
                        "name": "config-node", 
                        "in": "body"
                    }
                ]
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ConfigNodeRead"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }
        }, 
        "/global-qos-config/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/GlobalQosConfigUpdate"
                        }, 
                        "name": "global-qos-config", 
                        "in": "body"
                    }
                ]
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/GlobalQosConfigRead"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }
        }, 
        "/route-targets": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/RouteTargetCreate"
                        }, 
                        "name": "route-target", 
                        "in": "body"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ResourceListSummary"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Report all fields of resource.", 
                        "name": "detail", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "List of specific fields to report.", 
                        "name": "fields", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Count of resource", 
                        "name": "count", 
                        "in": "query"
                    }
                ]
            }
        }, 
        "/database-nodes": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/DatabaseNodeCreate"
                        }, 
                        "name": "database-node", 
                        "in": "body"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ResourceListSummary"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Report all fields of resource.", 
                        "name": "detail", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "List of specific fields to report.", 
                        "name": "fields", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Count of resource", 
                        "name": "count", 
                        "in": "query"
                    }
                ]
            }
        }, 
        "/route-target/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/RouteTargetUpdate"
                        }, 
                        "name": "route-target", 
                        "in": "body"
                    }
                ]
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/RouteTargetRead"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }
        }, 
        "/virtual-ips": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/VirtualIpCreate"
                        }, 
                        "name": "virtual-ip", 
                        "in": "body"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ResourceListSummary"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Report all fields of resource.", 
                        "name": "detail", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "List of specific fields to report.", 
                        "name": "fields", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Count of resource", 
                        "name": "count", 
                        "in": "query"
                    }
                ]
            }
        }, 
        "/service-appliance/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceApplianceUpdate"
                        }, 
                        "name": "service-appliance", 
                        "in": "body"
                    }
                ]
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ServiceApplianceRead"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }
        }, 
        "/virtual-networks": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/VirtualNetworkCreate"
                        }, 
                        "name": "virtual-network", 
                        "in": "body"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ResourceListSummary"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Report all fields of resource.", 
                        "name": "detail", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "List of specific fields to report.", 
                        "name": "fields", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Count of resource", 
                        "name": "count", 
                        "in": "query"
                    }
                ]
            }
        }, 
        "/instance-ips": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/InstanceIpCreate"
                        }, 
                        "name": "instance-ip", 
                        "in": "body"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ResourceListSummary"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Report all fields of resource.", 
                        "name": "detail", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "List of specific fields to report.", 
                        "name": "fields", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Count of resource", 
                        "name": "count", 
                        "in": "query"
                    }
                ]
            }
        }, 
        "/qos-config/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/QosConfigUpdate"
                        }, 
                        "name": "qos-config", 
                        "in": "body"
                    }
                ]
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/QosConfigRead"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }
        }, 
        "/alarms": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/AlarmCreate"
                        }, 
                        "name": "alarm", 
                        "in": "body"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ResourceListSummary"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Report all fields of resource.", 
                        "name": "detail", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "List of specific fields to report.", 
                        "name": "fields", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Count of resource", 
                        "name": "count", 
                        "in": "query"
                    }
                ]
            }
        }, 
        "/network-ipams": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/NetworkIpamCreate"
                        }, 
                        "name": "network-ipam", 
                        "in": "body"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ResourceListSummary"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Report all fields of resource.", 
                        "name": "detail", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "List of specific fields to report.", 
                        "name": "fields", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Count of resource", 
                        "name": "count", 
                        "in": "query"
                    }
                ]
            }
        }, 
        "/loadbalancers": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/LoadbalancerCreate"
                        }, 
                        "name": "loadbalancer", 
                        "in": "body"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ResourceListSummary"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Report all fields of resource.", 
                        "name": "detail", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "List of specific fields to report.", 
                        "name": "fields", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Count of resource", 
                        "name": "count", 
                        "in": "query"
                    }
                ]
            }
        }, 
        "/virtual-DNSs": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/VirtualDnsCreate"
                        }, 
                        "name": "virtual-DNS", 
                        "in": "body"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ResourceListSummary"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Report all fields of resource.", 
                        "name": "detail", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "List of specific fields to report.", 
                        "name": "fields", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Count of resource", 
                        "name": "count", 
                        "in": "query"
                    }
                ]
            }
        }, 
        "/analytics-node/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/AnalyticsNodeUpdate"
                        }, 
                        "name": "analytics-node", 
                        "in": "body"
                    }
                ]
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/AnalyticsNodeRead"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }
        }, 
        "/service-template/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceTemplateUpdate"
                        }, 
                        "name": "service-template", 
                        "in": "body"
                    }
                ]
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ServiceTemplateRead"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }
        }, 
        "/loadbalancer-listener/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/LoadbalancerListenerUpdate"
                        }, 
                        "name": "loadbalancer-listener", 
                        "in": "body"
                    }
                ]
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/LoadbalancerListenerRead"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }
        }, 
        "/routing-instance/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/RoutingInstanceUpdate"
                        }, 
                        "name": "routing-instance", 
                        "in": "body"
                    }
                ]
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/RoutingInstanceRead"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }
        }, 
        "/projects": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ProjectCreate"
                        }, 
                        "name": "project", 
                        "in": "body"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ResourceListSummary"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Report all fields of resource.", 
                        "name": "detail", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "List of specific fields to report.", 
                        "name": "fields", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Count of resource", 
                        "name": "count", 
                        "in": "query"
                    }
                ]
            }
        }, 
        "/provider-attachment/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/ProviderAttachmentUpdate"
                        }, 
                        "name": "provider-attachment", 
                        "in": "body"
                    }
                ]
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ProviderAttachmentRead"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }
        }, 
        "/alarm/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/AlarmUpdate"
                        }, 
                        "name": "alarm", 
                        "in": "body"
                    }
                ]
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/AlarmRead"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }
        }, 
        "/global-vrouter-config/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/GlobalVrouterConfigUpdate"
                        }, 
                        "name": "global-vrouter-config", 
                        "in": "body"
                    }
                ]
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/GlobalVrouterConfigRead"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }
        }, 
        "/qos-queues": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/QosQueueCreate"
                        }, 
                        "name": "qos-queue", 
                        "in": "body"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ResourceListSummary"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Report all fields of resource.", 
                        "name": "detail", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "List of specific fields to report.", 
                        "name": "fields", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Count of resource", 
                        "name": "count", 
                        "in": "query"
                    }
                ]
            }
        }, 
        "/forwarding-class/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/ForwardingClassUpdate"
                        }, 
                        "name": "forwarding-class", 
                        "in": "body"
                    }
                ]
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ForwardingClassRead"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }
        }, 
        "/virtual-router/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/VirtualRouterUpdate"
                        }, 
                        "name": "virtual-router", 
                        "in": "body"
                    }
                ]
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/VirtualRouterRead"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }
        }, 
        "/network-policys": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/NetworkPolicyCreate"
                        }, 
                        "name": "network-policy", 
                        "in": "body"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ResourceListSummary"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Report all fields of resource.", 
                        "name": "detail", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "List of specific fields to report.", 
                        "name": "fields", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Count of resource", 
                        "name": "count", 
                        "in": "query"
                    }
                ]
            }
        }, 
        "/customer-attachment/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/CustomerAttachmentUpdate"
                        }, 
                        "name": "customer-attachment", 
                        "in": "body"
                    }
                ]
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/CustomerAttachmentRead"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }
        }, 
        "/loadbalancer-healthmonitor/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/LoadbalancerHealthmonitorUpdate"
                        }, 
                        "name": "loadbalancer-healthmonitor", 
                        "in": "body"
                    }
                ]
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/LoadbalancerHealthmonitorRead"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }
        }, 
        "/database-node/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/DatabaseNodeUpdate"
                        }, 
                        "name": "database-node", 
                        "in": "body"
                    }
                ]
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/DatabaseNodeRead"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }
        }, 
        "/alias-ip-pool/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/AliasIpPoolUpdate"
                        }, 
                        "name": "alias-ip-pool", 
                        "in": "body"
                    }
                ]
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/AliasIpPoolRead"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }
        }, 
        "/physical-router/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/PhysicalRouterUpdate"
                        }, 
                        "name": "physical-router", 
                        "in": "body"
                    }
                ]
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/PhysicalRouterRead"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }
        }, 
        "/service-appliance-set/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceApplianceSetUpdate"
                        }, 
                        "name": "service-appliance-set", 
                        "in": "body"
                    }
                ]
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ServiceApplianceSetRead"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }
        }, 
        "/route-aggregate/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/RouteAggregateUpdate"
                        }, 
                        "name": "route-aggregate", 
                        "in": "body"
                    }
                ]
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/RouteAggregateRead"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }
        }, 
        "/access-control-lists": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/AccessControlListCreate"
                        }, 
                        "name": "access-control-list", 
                        "in": "body"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ResourceListSummary"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Report all fields of resource.", 
                        "name": "detail", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "List of specific fields to report.", 
                        "name": "fields", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Count of resource", 
                        "name": "count", 
                        "in": "query"
                    }
                ]
            }
        }, 
        "/route-tables": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/RouteTableCreate"
                        }, 
                        "name": "route-table", 
                        "in": "body"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ResourceListSummary"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Report all fields of resource.", 
                        "name": "detail", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "List of specific fields to report.", 
                        "name": "fields", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Count of resource", 
                        "name": "count", 
                        "in": "query"
                    }
                ]
            }
        }, 
        "/service-health-check/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceHealthCheckUpdate"
                        }, 
                        "name": "service-health-check", 
                        "in": "body"
                    }
                ]
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ServiceHealthCheckRead"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }
        }, 
        "/bgp-routers": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/BgpRouterCreate"
                        }, 
                        "name": "bgp-router", 
                        "in": "body"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ResourceListSummary"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Report all fields of resource.", 
                        "name": "detail", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "List of specific fields to report.", 
                        "name": "fields", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Count of resource", 
                        "name": "count", 
                        "in": "query"
                    }
                ]
            }
        }, 
        "/api-access-list/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/ApiAccessListUpdate"
                        }, 
                        "name": "api-access-list", 
                        "in": "body"
                    }
                ]
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ApiAccessListRead"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }
        }, 
        "/api-access-lists": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ApiAccessListCreate"
                        }, 
                        "name": "api-access-list", 
                        "in": "body"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ResourceListSummary"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Report all fields of resource.", 
                        "name": "detail", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "List of specific fields to report.", 
                        "name": "fields", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Count of resource", 
                        "name": "count", 
                        "in": "query"
                    }
                ]
            }
        }, 
        "/bgp-as-a-services": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/BgpAsAServiceCreate"
                        }, 
                        "name": "bgp-as-a-service", 
                        "in": "body"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ResourceListSummary"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Report all fields of resource.", 
                        "name": "detail", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "List of specific fields to report.", 
                        "name": "fields", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Count of resource", 
                        "name": "count", 
                        "in": "query"
                    }
                ]
            }
        }, 
        "/domains": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/DomainCreate"
                        }, 
                        "name": "domain", 
                        "in": "body"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ResourceListSummary"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Report all fields of resource.", 
                        "name": "detail", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "List of specific fields to report.", 
                        "name": "fields", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Count of resource", 
                        "name": "count", 
                        "in": "query"
                    }
                ]
            }
        }, 
        "/service-appliance-sets": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceApplianceSetCreate"
                        }, 
                        "name": "service-appliance-set", 
                        "in": "body"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ResourceListSummary"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Report all fields of resource.", 
                        "name": "detail", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "List of specific fields to report.", 
                        "name": "fields", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Count of resource", 
                        "name": "count", 
                        "in": "query"
                    }
                ]
            }
        }, 
        "/virtual-machine-interfaces": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/VirtualMachineInterfaceCreate"
                        }, 
                        "name": "virtual-machine-interface", 
                        "in": "body"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ResourceListSummary"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Report all fields of resource.", 
                        "name": "detail", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "List of specific fields to report.", 
                        "name": "fields", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Count of resource", 
                        "name": "count", 
                        "in": "query"
                    }
                ]
            }
        }, 
        "/physical-interfaces": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/PhysicalInterfaceCreate"
                        }, 
                        "name": "physical-interface", 
                        "in": "body"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ResourceListSummary"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Report all fields of resource.", 
                        "name": "detail", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "List of specific fields to report.", 
                        "name": "fields", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Count of resource", 
                        "name": "count", 
                        "in": "query"
                    }
                ]
            }
        }, 
        "/route-table/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/RouteTableUpdate"
                        }, 
                        "name": "route-table", 
                        "in": "body"
                    }
                ]
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/RouteTableRead"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }
        }, 
        "/dsa-rules": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/DsaRuleCreate"
                        }, 
                        "name": "dsa-rule", 
                        "in": "body"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ResourceListSummary"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Report all fields of resource.", 
                        "name": "detail", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "List of specific fields to report.", 
                        "name": "fields", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Count of resource", 
                        "name": "count", 
                        "in": "query"
                    }
                ]
            }
        }, 
        "/loadbalancer-listeners": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/LoadbalancerListenerCreate"
                        }, 
                        "name": "loadbalancer-listener", 
                        "in": "body"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ResourceListSummary"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Report all fields of resource.", 
                        "name": "detail", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "List of specific fields to report.", 
                        "name": "fields", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Count of resource", 
                        "name": "count", 
                        "in": "query"
                    }
                ]
            }
        }, 
        "/dsa-rule/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/DsaRuleUpdate"
                        }, 
                        "name": "dsa-rule", 
                        "in": "body"
                    }
                ]
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/DsaRuleRead"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }
        }, 
        "/loadbalancer-pool/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/LoadbalancerPoolUpdate"
                        }, 
                        "name": "loadbalancer-pool", 
                        "in": "body"
                    }
                ]
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/LoadbalancerPoolRead"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }
        }, 
        "/bgp-as-a-service/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/BgpAsAServiceUpdate"
                        }, 
                        "name": "bgp-as-a-service", 
                        "in": "body"
                    }
                ]
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/BgpAsAServiceRead"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }
        }, 
        "/port-tuple/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/PortTupleUpdate"
                        }, 
                        "name": "port-tuple", 
                        "in": "body"
                    }
                ]
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/PortTupleRead"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }
        }, 
        "/interface-route-tables": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/InterfaceRouteTableCreate"
                        }, 
                        "name": "interface-route-table", 
                        "in": "body"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ResourceListSummary"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Report all fields of resource.", 
                        "name": "detail", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "List of specific fields to report.", 
                        "name": "fields", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Count of resource", 
                        "name": "count", 
                        "in": "query"
                    }
                ]
            }
        }, 
        "/qos-configs": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/QosConfigCreate"
                        }, 
                        "name": "qos-config", 
                        "in": "body"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ResourceListSummary"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Report all fields of resource.", 
                        "name": "detail", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "List of specific fields to report.", 
                        "name": "fields", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Count of resource", 
                        "name": "count", 
                        "in": "query"
                    }
                ]
            }
        }, 
        "/security-groups": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/SecurityGroupCreate"
                        }, 
                        "name": "security-group", 
                        "in": "body"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ResourceListSummary"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Report all fields of resource.", 
                        "name": "detail", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "List of specific fields to report.", 
                        "name": "fields", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Count of resource", 
                        "name": "count", 
                        "in": "query"
                    }
                ]
            }
        }, 
        "/physical-routers": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/PhysicalRouterCreate"
                        }, 
                        "name": "physical-router", 
                        "in": "body"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ResourceListSummary"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Report all fields of resource.", 
                        "name": "detail", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "List of specific fields to report.", 
                        "name": "fields", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Count of resource", 
                        "name": "count", 
                        "in": "query"
                    }
                ]
            }
        }, 
        "/logical-router/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/LogicalRouterUpdate"
                        }, 
                        "name": "logical-router", 
                        "in": "body"
                    }
                ]
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/LogicalRouterRead"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }
        }, 
        "/forwarding-classs": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ForwardingClassCreate"
                        }, 
                        "name": "forwarding-class", 
                        "in": "body"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ResourceListSummary"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Report all fields of resource.", 
                        "name": "detail", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "List of specific fields to report.", 
                        "name": "fields", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Count of resource", 
                        "name": "count", 
                        "in": "query"
                    }
                ]
            }
        }, 
        "/id-to-fqname": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/TypeFQName"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }, 
                        "name": "uuid", 
                        "in": "body"
                    }
                ]
            }
        }, 
        "/floating-ips": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/FloatingIpCreate"
                        }, 
                        "name": "floating-ip", 
                        "in": "body"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ResourceListSummary"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Report all fields of resource.", 
                        "name": "detail", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "List of specific fields to report.", 
                        "name": "fields", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Count of resource", 
                        "name": "count", 
                        "in": "query"
                    }
                ]
            }
        }, 
        "/virtual-machine-interface/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/VirtualMachineInterfaceUpdate"
                        }, 
                        "name": "virtual-machine-interface", 
                        "in": "body"
                    }
                ]
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/VirtualMachineInterfaceRead"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }
        }, 
        "/service-instances": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceInstanceCreate"
                        }, 
                        "name": "service-instance", 
                        "in": "body"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ResourceListSummary"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Report all fields of resource.", 
                        "name": "detail", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "List of specific fields to report.", 
                        "name": "fields", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Count of resource", 
                        "name": "count", 
                        "in": "query"
                    }
                ]
            }
        }, 
        "/network-ipam/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/NetworkIpamUpdate"
                        }, 
                        "name": "network-ipam", 
                        "in": "body"
                    }
                ]
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/NetworkIpamRead"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }
        }, 
        "/qos-queue/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/QosQueueUpdate"
                        }, 
                        "name": "qos-queue", 
                        "in": "body"
                    }
                ]
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/QosQueueRead"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }
        }, 
        "/virtual-machine/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/VirtualMachineUpdate"
                        }, 
                        "name": "virtual-machine", 
                        "in": "body"
                    }
                ]
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/VirtualMachineRead"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }
        }, 
        "/routing-policys": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/RoutingPolicyCreate"
                        }, 
                        "name": "routing-policy", 
                        "in": "body"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ResourceListSummary"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Report all fields of resource.", 
                        "name": "detail", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "List of specific fields to report.", 
                        "name": "fields", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Count of resource", 
                        "name": "count", 
                        "in": "query"
                    }
                ]
            }
        }, 
        "/route-aggregates": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/RouteAggregateCreate"
                        }, 
                        "name": "route-aggregate", 
                        "in": "body"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ResourceListSummary"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Report all fields of resource.", 
                        "name": "detail", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "List of specific fields to report.", 
                        "name": "fields", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Count of resource", 
                        "name": "count", 
                        "in": "query"
                    }
                ]
            }
        }, 
        "/loadbalancer-healthmonitors": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/LoadbalancerHealthmonitorCreate"
                        }, 
                        "name": "loadbalancer-healthmonitor", 
                        "in": "body"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ResourceListSummary"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Report all fields of resource.", 
                        "name": "detail", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "List of specific fields to report.", 
                        "name": "fields", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Count of resource", 
                        "name": "count", 
                        "in": "query"
                    }
                ]
            }
        }, 
        "/service-templates": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceTemplateCreate"
                        }, 
                        "name": "service-template", 
                        "in": "body"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ResourceListSummary"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Report all fields of resource.", 
                        "name": "detail", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "List of specific fields to report.", 
                        "name": "fields", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Count of resource", 
                        "name": "count", 
                        "in": "query"
                    }
                ]
            }
        }, 
        "/fqname-to-id": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "schema": {
                            "$ref": "#/definitions/Type"
                        }, 
                        "name": "type", 
                        "in": "body"
                    }, 
                    {
                        "required": true, 
                        "schema": {
                            "$ref": "#/definitions/FQName"
                        }, 
                        "name": "fq_name", 
                        "in": "body"
                    }
                ]
            }
        }, 
        "/config-root/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/ConfigRootUpdate"
                        }, 
                        "name": "config-root", 
                        "in": "body"
                    }
                ]
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ConfigRootRead"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }
        }, 
        "/subnets": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/SubnetCreate"
                        }, 
                        "name": "subnet", 
                        "in": "body"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ResourceListSummary"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Report all fields of resource.", 
                        "name": "detail", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "List of specific fields to report.", 
                        "name": "fields", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Count of resource", 
                        "name": "count", 
                        "in": "query"
                    }
                ]
            }
        }, 
        "/config-roots": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ConfigRootCreate"
                        }, 
                        "name": "config-root", 
                        "in": "body"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ResourceListSummary"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Report all fields of resource.", 
                        "name": "detail", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "List of specific fields to report.", 
                        "name": "fields", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Count of resource", 
                        "name": "count", 
                        "in": "query"
                    }
                ]
            }
        }, 
        "/physical-interface/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/PhysicalInterfaceUpdate"
                        }, 
                        "name": "physical-interface", 
                        "in": "body"
                    }
                ]
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/PhysicalInterfaceRead"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }
        }, 
        "/port-tuples": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/PortTupleCreate"
                        }, 
                        "name": "port-tuple", 
                        "in": "body"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ResourceListSummary"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Report all fields of resource.", 
                        "name": "detail", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "List of specific fields to report.", 
                        "name": "fields", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Count of resource", 
                        "name": "count", 
                        "in": "query"
                    }
                ]
            }
        }, 
        "/global-qos-configs": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/GlobalQosConfigCreate"
                        }, 
                        "name": "global-qos-config", 
                        "in": "body"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ResourceListSummary"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Report all fields of resource.", 
                        "name": "detail", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "List of specific fields to report.", 
                        "name": "fields", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Count of resource", 
                        "name": "count", 
                        "in": "query"
                    }
                ]
            }
        }, 
        "/loadbalancer-pools": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/LoadbalancerPoolCreate"
                        }, 
                        "name": "loadbalancer-pool", 
                        "in": "body"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ResourceListSummary"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Report all fields of resource.", 
                        "name": "detail", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "List of specific fields to report.", 
                        "name": "fields", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "boolean", 
                        "description": "Count of resource", 
                        "name": "count", 
                        "in": "query"
                    }
                ]
            }
        }, 
        "/namespace/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/NamespaceUpdate"
                        }, 
                        "name": "namespace", 
                        "in": "body"
                    }
                ]
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Uuid"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/NamespaceRead"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "The id of resource", 
                        "name": "id", 
                        "in": "path"
                    }
                ]
            }
        }
    }, 
    "host": "localhost:8082", 
    "schemes": [
        "http"
    ], 
    "produces": [
        "application/json"
    ], 
    "definitions": {
        "DomainUpdate": {
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "domain_limits": {
                    "description": "Domain level Qouta, not currently implemented", 
                    "$ref": "#/definitions/DomainLimitsType"
                }
            }
        }, 
        "VirtualDnsType": {
            "required": [
                "domain_name"
            ], 
            "properties": {
                "floating_ip_record": {
                    "type": "string", 
                    "description": "Decides how floating ip records are added"
                }, 
                "domain_name": {
                    "type": "string", 
                    "description": "Default domain name for this virtual DNS server"
                }, 
                "external_visible": {
                    "type": "boolean", 
                    "description": "Currently this option is not supported"
                }, 
                "next_virtual_DNS": {
                    "type": "string", 
                    "description": "Next virtual DNS server to lookup if record is not found. Default is proxy to\ninfrastructure DNS"
                }, 
                "dynamic_records_from_client": {
                    "type": "boolean", 
                    "description": "Allow automatic addition of records on VM launch, default is True"
                }, 
                "reverse_resolution": {
                    "type": "boolean", 
                    "description": "Allow reverse DNS resolution, ip to name mapping"
                }, 
                "default_ttl_seconds": {
                    "type": "integer", 
                    "description": "Default Time To Live for DNS records"
                }, 
                "record_order": {
                    "type": "string", 
                    "description": "Order of DNS load balancing, fixed, random, round-robin"
                }
            }
        }, 
        "VrfAssignTableType": {
            "properties": {
                "vrf_assign_rule": {
                    "$ref": "#/definitions/VrfAssignRuleType"
                }
            }
        }, 
        "IpamSubnets": {
            "properties": {
                "subnets": {
                    "$ref": "#/definitions/IpamSubnetType"
                }
            }
        }, 
        "DsaRuleUpdate": {
            "properties": {
                "dsa_rule_entry": {
                    "description": "rule entry defining pubisher set and subscriber set.", 
                    "$ref": "#/definitions/DiscoveryServiceAssignmentType"
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }
            }
        }, 
        "PolicyStatementType": {
            "properties": {
                "term": {
                    "$ref": "#/definitions/PolicyTermType"
                }
            }
        }, 
        "LoadbalancerListenerUpdate": {
            "properties": {
                "loadbalancer_listener_properties": {
                    "$ref": "#/definitions/LoadbalancerListenerType"
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "loadbalancer_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }
            }
        }, 
        "VirtualIpCreate": {
            "required": [
                "fq_name"
            ], 
            "properties": {
                "virtual_ip_properties": {
                    "$ref": "#/definitions/VirtualIpType"
                }, 
                "fq_name": {
                    "$ref": "#/definitions/FQName"
                }, 
                "virtual_machine_interface_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "loadbalancer_pool_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }
            }
        }, 
        "VrfAssignRuleType": {
            "properties": {
                "routing_instance": {
                    "type": "string"
                }, 
                "match_condition": {
                    "$ref": "#/definitions/MatchConditionType"
                }, 
                "vlan_tag": {
                    "type": "integer"
                }, 
                "ignore_acl": {
                    "type": "boolean"
                }
            }
        }, 
        "LogicalRouterCreate": {
            "required": [
                "fq_name"
            ], 
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "configured_route_target_list": {
                    "description": "List of route targets that represent this logical router, all virtual networks connected to this\nlogical router will have this as their route target list.", 
                    "$ref": "#/definitions/RouteTargetList"
                }, 
                "virtual_machine_interface_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "virtual_network_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "route_table_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "route_target_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "fq_name": {
                    "$ref": "#/definitions/FQName"
                }, 
                "service_instance_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }
            }
        }, 
        "CommunityListType": {
            "properties": {
                "community": {
                    "type": "string", 
                    "description": "List of Community attributes, it indicates the attributes with which the routes\nare tagged while publishing.\nThe attributes will be represented as bgp community in the path attribute.\nEach attribute is indicated as string.\n    1. String with two integers separated by \":\". E.g. \"64512:123\"\n    2. Well-known community as string.\n       Possible values are \"no-export\" \"accept-own\" \"no-advertise\" \"no-export-\nsubconfed\" \"no-reoriginate\""
                }
            }
        }, 
        "VirtualMachineInterfacePropertiesType": {
            "properties": {
                "sub_interface_vlan_tag": {
                    "type": "integer", 
                    "description": "802.1Q VLAN tag to be used if this interface is sub-interface for some other\ninterface."
                }, 
                "local_preference": {
                    "type": "integer", 
                    "description": "BGP route local preference for routes representing this interface, higher value\nis higher preference"
                }, 
                "interface_mirror": {
                    "description": "Interface Mirror configuration", 
                    "$ref": "#/definitions/InterfaceMirrorType"
                }, 
                "service_interface_type": {
                    "type": "string", 
                    "description": "This interface belongs to Service Instance and is tagged as left, right or other"
                }
            }
        }, 
        "ServiceTemplateUpdate": {
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "service_template_properties": {
                    "description": "Service template confurigation parameters.", 
                    "$ref": "#/definitions/ServiceTemplateType"
                }, 
                "service_appliance_set_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }
            }
        }, 
        "AlarmRead": {
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "alarm_severity": {
                    "minimum": 0, 
                    "type": "number", 
                    "maximum": 7, 
                    "description": "Severity level for the alarm."
                }, 
                "alarm_rules": {
                    "description": "Rules based on the UVE attributes specified as OR-of-ANDs of AlarmExpression template. Example:\n\"alarm_rules\": {\"or_list\": [{\"and_list\": [{AlarmExpression1}, {AlarmExpression2}, ...]},\n{\"and_list\": [{AlarmExpression3}, {AlarmExpression4}, ...]}]}", 
                    "$ref": "#/definitions/AlarmOrList"
                }, 
                "perms2": {
                    "description": "Permissions data for role based access.", 
                    "$ref": "#/definitions/PermType2"
                }, 
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.", 
                    "$ref": "#/definitions/IdPermsType"
                }, 
                "uve_keys": {
                    "type": "string", 
                    "description": "List of UVE tables or UVE objects where this alarm config should be applied. For example, rules\nbased on NodeStatus UVE can be applied to multiple object types such as analytics-node, config-node,\ncontrol-node, etc., Alarm config may also be applied to specific objects that can be specified as\n<uve-table-name>.<uve-name>"
                }
            }
        }, 
        "StaticMirrorNhType": {
            "required": [
                "vtep_dst_ip_address", 
                "vni"
            ], 
            "properties": {
                "vtep_dst_ip_address": {
                    "type": "string", 
                    "description": "ip address of destination vtep"
                }, 
                "vtep_dst_mac_address": {
                    "type": "string", 
                    "description": "mac address of destination vtep"
                }, 
                "vni": {
                    "type": "integer", 
                    "description": "Vni of vtep"
                }
            }
        }, 
        "ServiceApplianceCreate": {
            "required": [
                "fq_name", 
                "service_appliance_ip_address", 
                "service_appliance_properties"
            ], 
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "physical_interface_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }, 
                        {
                            "properties": {
                                "attr": {
                                    "$ref": "#/definitions/ServiceApplianceInterfaceType"
                                }
                            }
                        }
                    ]
                }, 
                "service_appliance_ip_address": {
                    "type": "string", 
                    "description": "Manegment Ip address of the service-appliance."
                }, 
                "service_appliance_user_credentials": {
                    "description": "Authentication credentials for driver to access service appliance.", 
                    "$ref": "#/definitions/UserCredentials"
                }, 
                "fq_name": {
                    "$ref": "#/definitions/FQName"
                }, 
                "service_appliance_properties": {
                    "description": "List of Key:Value pairs used by the provider driver of this service appliance.", 
                    "$ref": "#/definitions/KeyValuePairs"
                }
            }
        }, 
        "DomainCreate": {
            "required": [
                "fq_name"
            ], 
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "fq_name": {
                    "$ref": "#/definitions/FQName"
                }, 
                "domain_limits": {
                    "description": "Domain level Qouta, not currently implemented", 
                    "$ref": "#/definitions/DomainLimitsType"
                }
            }
        }, 
        "ProtocolStaticType": {
            "properties": {
                "route": {
                    "type": "string"
                }
            }
        }, 
        "IpamType": {
            "properties": {
                "ipam_method": {
                    "type": "string"
                }, 
                "ipam_dns_method": {
                    "type": "string"
                }, 
                "ipam_dns_server": {
                    "$ref": "#/definitions/IpamDnsAddressType"
                }, 
                "dhcp_option_list": {
                    "$ref": "#/definitions/DhcpOptionsListType"
                }, 
                "host_routes": {
                    "$ref": "#/definitions/RouteTableType"
                }, 
                "cidr_block": {
                    "$ref": "#/definitions/SubnetType"
                }
            }
        }, 
        "LoadbalancerListenerRead": {
            "properties": {
                "loadbalancer_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }
                    ]
                }, 
                "loadbalancer_listener_properties": {
                    "$ref": "#/definitions/LoadbalancerListenerType"
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.", 
                    "$ref": "#/definitions/IdPermsType"
                }, 
                "perms2": {
                    "description": "Permissions data for role based access.", 
                    "$ref": "#/definitions/PermType2"
                }
            }
        }, 
        "LoadbalancerListenerCreate": {
            "required": [
                "fq_name"
            ], 
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "loadbalancer_listener_properties": {
                    "$ref": "#/definitions/LoadbalancerListenerType"
                }, 
                "fq_name": {
                    "$ref": "#/definitions/FQName"
                }, 
                "loadbalancer_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }
            }
        }, 
        "FloatingIpPoolUpdate": {
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "floating_ip_pool_prefixes": {
                    "description": "List of ip prefixes that restrict foating ip allocation from the corresponding virtual network.(Not\nyet implemented).", 
                    "$ref": "#/definitions/FloatingIpPoolType"
                }
            }
        }, 
        "CustomerAttachmentUpdate": {
            "properties": {
                "attachment_address": {
                    "$ref": "#/definitions/AttachmentAddressType"
                }, 
                "floating_ip_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "virtual_machine_interface_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }
            }
        }, 
        "LoadbalancerListenerType": {
            "properties": {
                "default_tls_container": {
                    "type": "string"
                }, 
                "protocol": {
                    "type": "string"
                }, 
                "connection_limit": {
                    "type": "integer"
                }, 
                "admin_state": {
                    "type": "boolean"
                }, 
                "sni_containers": {
                    "type": "string"
                }, 
                "protocol_port": {
                    "type": "integer"
                }
            }
        }, 
        "TimerType": {
            "required": [
                "start_time", 
                "on_interval", 
                "off_interval", 
                "end_time"
            ], 
            "properties": {
                "start_time": {
                    "type": "string", 
                    "format": "date-time"
                }, 
                "off_interval": {
                    "type": "string"
                }, 
                "on_interval": {
                    "type": "string"
                }, 
                "end_time": {
                    "type": "string", 
                    "format": "date-time"
                }
            }
        }, 
        "VirtualNetworkType": {
            "required": [
                "vxlan_network_identifier"
            ], 
            "properties": {
                "network_id": {
                    "type": "integer", 
                    "description": "Not currently in used"
                }, 
                "vxlan_network_identifier": {
                    "type": "integer", 
                    "description": "VxLAN VNI value for this network"
                }, 
                "forwarding_mode": {
                    "type": "string", 
                    "description": "Packet forwarding mode for this virtual network"
                }, 
                "allow_transit": {
                    "type": "boolean", 
                    "description": "Enables transitive property for route imports.\n    If B imports routes of A and C imports from B,\n    then if B is transitive then C will have routes from A."
                }, 
                "rpf": {
                    "type": "string", 
                    "description": "Flag used to diable Reverse Path Forwarding(RPF) check for this network"
                }
            }
        }, 
        "ServiceChainInfo": {
            "properties": {
                "routing_instance": {
                    "type": "string"
                }, 
                "source_routing_instance": {
                    "type": "string"
                }, 
                "prefix": {
                    "type": "string"
                }, 
                "service_instance": {
                    "type": "string"
                }, 
                "service_chain_address": {
                    "type": "string"
                }
            }
        }, 
        "SubnetListType": {
            "properties": {
                "subnet": {
                    "$ref": "#/definitions/SubnetType"
                }
            }
        }, 
        "DatabaseNodeCreate": {
            "required": [
                "fq_name", 
                "database_node_ip_address"
            ], 
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "database_node_ip_address": {
                    "type": "string", 
                    "description": "Ip address of the database node, set while provisioning."
                }, 
                "fq_name": {
                    "$ref": "#/definitions/FQName"
                }
            }
        }, 
        "PluginProperty": {
            "properties": {
                "property": {
                    "type": "string"
                }, 
                "value": {
                    "type": "string"
                }
            }
        }, 
        "StaticRouteType": {
            "properties": {
                "route_target": {
                    "type": "string"
                }, 
                "prefix": {
                    "type": "string"
                }, 
                "next_hop": {
                    "type": "string"
                }, 
                "community": {
                    "type": "string"
                }
            }
        }, 
        "MirrorActionType": {
            "required": [
                "analyzer_ip_address", 
                "routing_instance"
            ], 
            "properties": {
                "analyzer_name": {
                    "type": "string", 
                    "description": "Name of service instance used as analyzer"
                }, 
                "nh_mode": {
                    "type": "string", 
                    "description": "This mode used to determine static or dynamic nh"
                }, 
                "juniper_header": {
                    "type": "boolean", 
                    "description": "This flag is used to determine with/without juniper-header"
                }, 
                "udp_port": {
                    "type": "integer", 
                    "description": "ip udp port used in contrail default encapsulation for mirroring"
                }, 
                "routing_instance": {
                    "type": "string", 
                    "description": "Internal use only, should be set to -1"
                }, 
                "static_nh_header": {
                    "description": "vtep details required if static nh enabled", 
                    "$ref": "#/definitions/StaticMirrorNhType"
                }, 
                "analyzer_ip_address": {
                    "type": "string", 
                    "description": "ip address of interface to which mirrored packets are sent"
                }, 
                "encapsulation": {
                    "type": "string", 
                    "description": "Encapsulation for Mirrored packet, not used currently"
                }, 
                "analyzer_mac_address": {
                    "type": "string", 
                    "description": "mac address of interface to which mirrored packets are sent"
                }
            }
        }, 
        "ServiceInstanceInterfaceType": {
            "required": [
                "virtual_network"
            ], 
            "properties": {
                "virtual_network": {
                    "type": "string", 
                    "description": "Interface belongs to this virtual network."
                }, 
                "ip_address": {
                    "type": "string", 
                    "description": "Shared ip for this interface (Only V1)"
                }, 
                "allowed_address_pairs": {
                    "description": "Allowed address pairs, list of (IP address, MAC) for this interface", 
                    "$ref": "#/definitions/AllowedAddressPairs"
                }, 
                "static_routes": {
                    "description": "Static routes for this interface (Only V1)", 
                    "$ref": "#/definitions/RouteTableType"
                }
            }
        }, 
        "VirtualNetworkPolicyType": {
            "properties": {
                "timer": {
                    "description": "Timer to sepcify when the policy can be active", 
                    "$ref": "#/definitions/TimerType"
                }, 
                "sequence": {
                    "description": "Sequence number to specify order of policy attachment to netwrok", 
                    "$ref": "#/definitions/SequenceType"
                }
            }
        }, 
        "AliasIpRead": {
            "properties": {
                "project_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }
                    ]
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "alias_ip_address": {
                    "type": "string", 
                    "description": "Alias ip address."
                }, 
                "alias_ip_address_family": {
                    "type": "string", 
                    "description": "Ip address family of the alias ip, IpV4 or IpV6"
                }, 
                "perms2": {
                    "description": "Permissions data for role based access.", 
                    "$ref": "#/definitions/PermType2"
                }, 
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.", 
                    "$ref": "#/definitions/IdPermsType"
                }, 
                "virtual_machine_interface_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }
                    ]
                }
            }
        }, 
        "UserDefinedCounter": {
            "required": [
                "name", 
                "pattern"
            ], 
            "properties": {
                "pattern": {
                    "type": "string", 
                    "description": "Perl type regular expression pattern to match"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the counter"
                }
            }
        }, 
        "ApiAccessListType": {
            "required": [
                "api_access"
            ], 
            "properties": {
                "api_access": {
                    "$ref": "#/definitions/ApiAccessType"
                }
            }
        }, 
        "ProviderAttachmentRead": {
            "properties": {
                "virtual_router_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }
                    ]
                }, 
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.", 
                    "$ref": "#/definitions/IdPermsType"
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "perms2": {
                    "description": "Permissions data for role based access.", 
                    "$ref": "#/definitions/PermType2"
                }
            }
        }, 
        "LogicalRouterUpdate": {
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "configured_route_target_list": {
                    "description": "List of route targets that represent this logical router, all virtual networks connected to this\nlogical router will have this as their route target list.", 
                    "$ref": "#/definitions/RouteTargetList"
                }, 
                "virtual_machine_interface_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "virtual_network_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "route_table_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "route_target_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "service_instance_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }
            }
        }, 
        "BgpRouterCreate": {
            "required": [
                "fq_name"
            ], 
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "fq_name": {
                    "$ref": "#/definitions/FQName"
                }, 
                "bgp_router_parameters": {
                    "$ref": "#/definitions/BgpRouterParams"
                }, 
                "bgp_router_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }, 
                        {
                            "properties": {
                                "attr": {
                                    "$ref": "#/definitions/BgpPeeringAttributes"
                                }
                            }
                        }
                    ]
                }
            }
        }, 
        "NetworkPolicyUpdate": {
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "network_policy_entries": {
                    "description": "Network policy rule entries.", 
                    "$ref": "#/definitions/PolicyEntriesType"
                }
            }
        }, 
        "ServiceTemplateCreate": {
            "required": [
                "fq_name", 
                "service_template_properties"
            ], 
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "fq_name": {
                    "$ref": "#/definitions/FQName"
                }, 
                "service_template_properties": {
                    "description": "Service template confurigation parameters.", 
                    "$ref": "#/definitions/ServiceTemplateType"
                }, 
                "service_appliance_set_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }
            }
        }, 
        "SubnetCreate": {
            "required": [
                "fq_name", 
                "subnet_ip_prefix"
            ], 
            "properties": {
                "subnet_ip_prefix": {
                    "description": "Ip prefix/length of the subnet.", 
                    "$ref": "#/definitions/SubnetType"
                }, 
                "fq_name": {
                    "$ref": "#/definitions/FQName"
                }, 
                "virtual_machine_interface_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }
            }
        }, 
        "DiscoveryServiceAssignmentRead": {
            "properties": {
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.", 
                    "$ref": "#/definitions/IdPermsType"
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "perms2": {
                    "description": "Permissions data for role based access.", 
                    "$ref": "#/definitions/PermType2"
                }
            }
        }, 
        "InstanceTargetType": {
            "properties": {
                "import_export": {
                    "type": "string"
                }
            }
        }, 
        "ServiceApplianceUpdate": {
            "properties": {
                "service_appliance_user_credentials": {
                    "description": "Authentication credentials for driver to access service appliance.", 
                    "$ref": "#/definitions/UserCredentials"
                }, 
                "physical_interface_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }, 
                        {
                            "properties": {
                                "attr": {
                                    "$ref": "#/definitions/ServiceApplianceInterfaceType"
                                }
                            }
                        }
                    ]
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "service_appliance_ip_address": {
                    "type": "string", 
                    "description": "Manegment Ip address of the service-appliance."
                }, 
                "service_appliance_properties": {
                    "description": "List of Key:Value pairs used by the provider driver of this service appliance.", 
                    "$ref": "#/definitions/KeyValuePairs"
                }
            }
        }, 
        "ProtocolOspfType": {
            "properties": {
                "area": {
                    "type": "integer"
                }
            }
        }, 
        "VirtualRouterCreate": {
            "required": [
                "fq_name", 
                "virtual_router_ip_address"
            ], 
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "virtual_router_ip_address": {
                    "type": "string", 
                    "description": "Ip address of the virtual router."
                }, 
                "virtual_router_dpdk_enabled": {
                    "type": "boolean", 
                    "description": "This vrouter's data path is using DPDK librarry, Virtual machines interfaces scheduled on this\ncompute node will be tagged with aditional flags so that they are spawned with user space virtio\ndriver. It is only applicable for embedded vrouter."
                }, 
                "virtual_machine_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "virtual_router_type": {
                    "type": "string", 
                    "description": "Different types of the vrouters in the system."
                }, 
                "fq_name": {
                    "$ref": "#/definitions/FQName"
                }
            }
        }, 
        "InterfaceRouteTableUpdate": {
            "properties": {
                "service_instance_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }, 
                        {
                            "properties": {
                                "attr": {
                                    "$ref": "#/definitions/ServiceInterfaceTag"
                                }
                            }
                        }
                    ]
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "interface_route_table_routes": {
                    "description": "Interface route table used same structure as route table, however the next hop field is irrelevent.", 
                    "$ref": "#/definitions/RouteTableType"
                }
            }
        }, 
        "DhcpOptionsListType": {
            "properties": {
                "dhcp_option": {
                    "description": "List of DHCP options", 
                    "$ref": "#/definitions/DhcpOptionType"
                }
            }
        }, 
        "AttachmentAddressType": {
            "properties": {}
        }, 
        "GlobalVrouterConfigCreate": {
            "required": [
                "fq_name"
            ], 
            "properties": {
                "ecmp_hashing_include_fields": {
                    "description": "ECMP hashing config at global level.", 
                    "$ref": "#/definitions/EcmpHashingIncludeFields"
                }, 
                "flow_aging_timeout_list": {
                    "description": "Flow aging timeout per application (protocol, port) list.", 
                    "$ref": "#/definitions/FlowAgingTimeoutList"
                }, 
                "fq_name": {
                    "$ref": "#/definitions/FQName"
                }, 
                "forwarding_mode": {
                    "type": "string", 
                    "description": "Packet forwarding mode for this system L2-only, L3-only OR L2-L3. L2-L3 is default."
                }, 
                "flow_export_rate": {
                    "type": "number", 
                    "description": "Flow export rate is global config, rate at which each vrouter will sample and export flow records to\nanalytics"
                }, 
                "linklocal_services": {
                    "description": "Global services provided on link local subnet to the virtual machines.", 
                    "$ref": "#/definitions/LinklocalServicesTypes"
                }, 
                "encapsulation_priorities": {
                    "description": "Ordered list of enapsulations that vrouter will use in priority order.", 
                    "$ref": "#/definitions/EncapsulationPrioritiesType"
                }, 
                "vxlan_network_identifier_mode": {
                    "type": "string", 
                    "description": "Method of allocation of VxLAN VNI(s). Set at provision time and cannot be changed.\n    configured = VxLAN VNI is given by user when virtual network is configured.\n    automatic = System will allocate VxLAN VNI automatically."
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }
            }
        }, 
        "QosConfigRead": {
            "properties": {
                "qos_config_type": {
                    "type": "string"
                }, 
                "vlan_priority_entries": {
                    "$ref": "#/definitions/QosIdForwardingClassPairs"
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "default_forwarding_class_id": {
                    "type": "number"
                }, 
                "perms2": {
                    "description": "Permissions data for role based access.", 
                    "$ref": "#/definitions/PermType2"
                }, 
                "mpls_exp_entries": {
                    "$ref": "#/definitions/QosIdForwardingClassPairs"
                }, 
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.", 
                    "$ref": "#/definitions/IdPermsType"
                }, 
                "dscp_entries": {
                    "$ref": "#/definitions/QosIdForwardingClassPairs"
                }, 
                "service_instance_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }
                    ]
                }
            }
        }, 
        "LoadbalancerMemberCreate": {
            "required": [
                "fq_name"
            ], 
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "loadbalancer_member_properties": {
                    "$ref": "#/definitions/LoadbalancerMemberType"
                }, 
                "fq_name": {
                    "$ref": "#/definitions/FQName"
                }
            }
        }, 
        "LoadbalancerRead": {
            "properties": {
                "service_instance_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }
                    ]
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "perms2": {
                    "description": "Permissions data for role based access.", 
                    "$ref": "#/definitions/PermType2"
                }, 
                "loadbalancer_properties": {
                    "$ref": "#/definitions/LoadbalancerType"
                }, 
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.", 
                    "$ref": "#/definitions/IdPermsType"
                }, 
                "virtual_machine_interface_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }
                    ]
                }, 
                "loadbalancer_provider": {
                    "type": "string"
                }
            }
        }, 
        "ConfigRootCreate": {
            "required": [
                "fq_name"
            ], 
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "fq_name": {
                    "$ref": "#/definitions/FQName"
                }
            }
        }, 
        "InterfaceRouteTableRead": {
            "properties": {
                "service_instance_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }
                    ]
                }, 
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.", 
                    "$ref": "#/definitions/IdPermsType"
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "perms2": {
                    "description": "Permissions data for role based access.", 
                    "$ref": "#/definitions/PermType2"
                }, 
                "interface_route_table_routes": {
                    "description": "Interface route table used same structure as route table, however the next hop field is irrelevent.", 
                    "$ref": "#/definitions/RouteTableType"
                }
            }
        }, 
        "LoadbalancerHealthmonitorType": {
            "properties": {
                "delay": {
                    "type": "integer"
                }, 
                "expected_codes": {
                    "type": "string"
                }, 
                "max_retries": {
                    "type": "integer"
                }, 
                "http_method": {
                    "type": "string"
                }, 
                "admin_state": {
                    "type": "boolean"
                }, 
                "timeout": {
                    "type": "integer"
                }, 
                "url_path": {
                    "type": "string"
                }, 
                "monitor_type": {
                    "type": "string"
                }
            }
        }, 
        "IpamSubnetType": {
            "required": [
                "subnet"
            ], 
            "properties": {
                "subnet": {
                    "description": "ip prefix and length for the subnet", 
                    "$ref": "#/definitions/SubnetType"
                }, 
                "addr_from_start": {
                    "type": "boolean", 
                    "description": "Start address allocation from start or from end of address range."
                }, 
                "enable_dhcp": {
                    "type": "boolean", 
                    "description": "Enable DHCP for the VM(s) in this subnet"
                }, 
                "default_gateway": {
                    "type": "string", 
                    "description": "default-gateway ip address in the subnet, if not provided one is auto generated\nby the system."
                }, 
                "alloc_unit": {
                    "type": "integer", 
                    "description": "allocation unit for this subnet to allocate bulk ip addresses"
                }, 
                "dns_nameservers": {
                    "type": "string", 
                    "description": "Tenant DNS servers ip address in tenant DNS method"
                }, 
                "dhcp_option_list": {
                    "description": "DHCP options list to be sent via DHCP for  VM(s) in this subnet", 
                    "$ref": "#/definitions/DhcpOptionsListType"
                }, 
                "subnet_uuid": {
                    "type": "string", 
                    "description": "Subnet UUID is auto generated by the system"
                }, 
                "allocation_pools": {
                    "description": "List of ranges of ip address within the subnet from which to allocate ip\naddress. default is entire prefix", 
                    "$ref": "#/definitions/AllocationPoolType"
                }, 
                "host_routes": {
                    "description": "Host routes to be sent via DHCP for VM(s) in this subnet, Next hop for these\nroutes is always default gateway", 
                    "$ref": "#/definitions/RouteTableType"
                }, 
                "dns_server_address": {
                    "type": "string", 
                    "description": "DNS server ip address in the subnet, if not provided one is auto generated by\nthe system."
                }, 
                "subnet_name": {
                    "type": "string", 
                    "description": "User provided name for this subnet"
                }
            }
        }, 
        "DatabaseNodeUpdate": {
            "properties": {
                "database_node_ip_address": {
                    "type": "string", 
                    "description": "Ip address of the database node, set while provisioning."
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }
            }
        }, 
        "FloatingIpRead": {
            "properties": {
                "project_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }
                    ]
                }, 
                "floating_ip_address_family": {
                    "type": "string", 
                    "description": "Ip address family of the floating ip, IpV4 or IpV6"
                }, 
                "virtual_machine_interface_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }
                    ]
                }, 
                "floating_ip_is_virtual_ip": {
                    "type": "boolean", 
                    "description": "This floating ip is used as virtual ip (VIP) in case of LBaaS."
                }, 
                "perms2": {
                    "description": "Permissions data for role based access.", 
                    "$ref": "#/definitions/PermType2"
                }, 
                "floating_ip_address": {
                    "type": "string", 
                    "description": "Floating ip address."
                }, 
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.", 
                    "$ref": "#/definitions/IdPermsType"
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "floating_ip_fixed_ip_address": {
                    "type": "string", 
                    "description": "This floating is tracking given fixed ip of the interface. The given fixed ip is used in 1:1 NAT."
                }
            }
        }, 
        "ActionUpdateType": {
            "properties": {
                "local_pref": {
                    "type": "integer"
                }, 
                "community": {
                    "$ref": "#/definitions/ActionCommunityType"
                }, 
                "med": {
                    "type": "integer"
                }
            }
        }, 
        "IpAddressesType": {
            "properties": {
                "ip_address": {
                    "type": "string", 
                    "description": "String of standard notation of ipv4 or ipv6 address"
                }
            }
        }, 
        "CustomerAttachmentCreate": {
            "required": [
                "fq_name"
            ], 
            "properties": {
                "attachment_address": {
                    "$ref": "#/definitions/AttachmentAddressType"
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "floating_ip_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "fq_name": {
                    "$ref": "#/definitions/FQName"
                }, 
                "virtual_machine_interface_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }
            }
        }, 
        "ServiceInstanceUpdate": {
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "service_template_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "service_instance_bindings": {
                    "description": "Opaque key value pair for generating config for the service instance.", 
                    "$ref": "#/definitions/KeyValuePairs"
                }, 
                "service_instance_properties": {
                    "description": "Service instance configuration parameters.", 
                    "$ref": "#/definitions/ServiceInstanceType"
                }, 
                "instance_ip_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }, 
                        {
                            "properties": {
                                "attr": {
                                    "$ref": "#/definitions/ServiceInterfaceTag"
                                }
                            }
                        }
                    ]
                }
            }
        }, 
        "FQName": {
            "required": [
                "fq_name"
            ], 
            "properties": {
                "fq_name": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "ConfigNodeRead": {
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.", 
                    "$ref": "#/definitions/IdPermsType"
                }, 
                "config_node_ip_address": {
                    "type": "string", 
                    "description": "Ip address of the config node, set while provisioning."
                }, 
                "perms2": {
                    "description": "Permissions data for role based access.", 
                    "$ref": "#/definitions/PermType2"
                }
            }
        }, 
        "VirtualNetworkUpdate": {
            "properties": {
                "virtual_network_properties": {
                    "description": "Virtual network miscelenious configurations.", 
                    "$ref": "#/definitions/VirtualNetworkType"
                }, 
                "ecmp_hashing_include_fields": {
                    "description": "ECMP hashing config at global level.", 
                    "$ref": "#/definitions/EcmpHashingIncludeFields"
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "is_shared": {
                    "type": "boolean", 
                    "description": "When true, this virtual network is shared with all tenants."
                }, 
                "network_policy_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }, 
                        {
                            "properties": {
                                "attr": {
                                    "$ref": "#/definitions/VirtualNetworkPolicyType"
                                }
                            }
                        }
                    ]
                }, 
                "router_external": {
                    "type": "boolean", 
                    "description": "When true, this virtual network is openstack router external network."
                }, 
                "network_ipam_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }, 
                        {
                            "properties": {
                                "attr": {
                                    "$ref": "#/definitions/VnSubnetsType"
                                }
                            }
                        }
                    ]
                }, 
                "route_table_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "import_route_target_list": {
                    "description": "List of route targets that are used as import for this virtual network.", 
                    "$ref": "#/definitions/RouteTargetList"
                }, 
                "qos_config_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "route_target_list": {
                    "description": "List of route targets that are used as both import and export for this virtual network.", 
                    "$ref": "#/definitions/RouteTargetList"
                }, 
                "export_route_target_list": {
                    "description": "List of route targets that are used as export for this virtual network.", 
                    "$ref": "#/definitions/RouteTargetList"
                }, 
                "flood_unknown_unicast": {
                    "type": "boolean", 
                    "description": "When true, packets with unknown unicast MAC addres are flooded within the network. Default they are\ndropped."
                }, 
                "external_ipam": {
                    "type": "boolean", 
                    "description": "IP address assignment to VM is done statically, outside of (external to) Contrail Ipam. vCenter only\nfeature."
                }, 
                "multi_policy_service_chains_enabled": {
                    "type": "boolean", 
                    "description": "Allow multiple service chains within same two networks based on network policy.\nCurrent limitation is that both networks must reside within cluster, except when right most service\nis NAT."
                }
            }
        }, 
        "RouteTargetRead": {
            "properties": {
                "routing_instance_back_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }, 
                        {
                            "properties": {
                                "attr": {
                                    "$ref": "#/definitions/InstanceTargetType"
                                }
                            }
                        }
                    ]
                }, 
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.", 
                    "$ref": "#/definitions/IdPermsType"
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "perms2": {
                    "description": "Permissions data for role based access.", 
                    "$ref": "#/definitions/PermType2"
                }, 
                "loadbalancer_healthmonitor_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }
                    ]
                }
            }
        }, 
        "PhysicalRouterRead": {
            "properties": {
                "physical_router_management_ip": {
                    "type": "string", 
                    "description": "Management ip for this physical router. It is used by the device manager to perform netconf and by\nSNMP collector if enabled."
                }, 
                "physical_router_snmp_credentials": {
                    "description": "SNMP credentials for the physical router used by SNMP colloctor.", 
                    "$ref": "#/definitions/SNMPCredentials"
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "physical_router_vendor_name": {
                    "type": "string", 
                    "description": "Vendor name of the physical router (e.g juniper). Used by the device manager to select driver."
                }, 
                "physical_router_product_name": {
                    "type": "string", 
                    "description": "Model name of the physical router (e.g juniper). Used by the device manager to select driver."
                }, 
                "perms2": {
                    "description": "Permissions data for role based access.", 
                    "$ref": "#/definitions/PermType2"
                }, 
                "virtual_network_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }
                    ]
                }, 
                "virtual_router_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }
                    ]
                }, 
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.", 
                    "$ref": "#/definitions/IdPermsType"
                }, 
                "bgp_router_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }
                    ]
                }, 
                "physical_router_user_credentials": {
                    "description": "Username and password for netconf to the physical router by device manager.", 
                    "$ref": "#/definitions/UserCredentials"
                }, 
                "physical_router_vnc_managed": {
                    "type": "boolean", 
                    "description": "This physical router is enabled to be configured by device manager."
                }, 
                "logical_interface_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }
                    ]
                }, 
                "physical_router_dataplane_ip": {
                    "type": "string", 
                    "description": "This is ip address in the ip-fabric(underlay) network that can be used in data palne by physical\nrouter. Usually it is the VTEP address in VxLAN for the TOR switch."
                }, 
                "physical_router_junos_service_ports": {
                    "description": "Juniper JUNOS specific sevice interfaces name  to perform services like NAT.", 
                    "$ref": "#/definitions/JunosServicePorts"
                }
            }
        }, 
        "GlobalQosConfigCreate": {
            "required": [
                "fq_name"
            ], 
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "fq_name": {
                    "$ref": "#/definitions/FQName"
                }
            }
        }, 
        "SubnetRead": {
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.", 
                    "$ref": "#/definitions/IdPermsType"
                }, 
                "subnet_ip_prefix": {
                    "description": "Ip prefix/length of the subnet.", 
                    "$ref": "#/definitions/SubnetType"
                }, 
                "virtual_machine_interface_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }
                    ]
                }, 
                "perms2": {
                    "description": "Permissions data for role based access.", 
                    "$ref": "#/definitions/PermType2"
                }
            }
        }, 
        "ServiceApplianceRead": {
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "physical_interface_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }, 
                        {
                            "properties": {
                                "attr": {
                                    "$ref": "#/definitions/ServiceApplianceInterfaceType"
                                }
                            }
                        }
                    ]
                }, 
                "service_appliance_ip_address": {
                    "type": "string", 
                    "description": "Manegment Ip address of the service-appliance."
                }, 
                "perms2": {
                    "description": "Permissions data for role based access.", 
                    "$ref": "#/definitions/PermType2"
                }, 
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.", 
                    "$ref": "#/definitions/IdPermsType"
                }, 
                "service_appliance_user_credentials": {
                    "description": "Authentication credentials for driver to access service appliance.", 
                    "$ref": "#/definitions/UserCredentials"
                }, 
                "service_appliance_properties": {
                    "description": "List of Key:Value pairs used by the provider driver of this service appliance.", 
                    "$ref": "#/definitions/KeyValuePairs"
                }
            }
        }, 
        "AclEntriesType": {
            "required": [
                "acl_rule"
            ], 
            "properties": {
                "dynamic": {
                    "type": "boolean", 
                    "description": "For Internal use only"
                }, 
                "acl_rule": {
                    "description": "For Internal use only", 
                    "$ref": "#/definitions/AclRuleType"
                }
            }
        }, 
        "ServiceHealthCheckType": {
            "required": [
                "health_check_type", 
                "monitor_type", 
                "delay", 
                "timeout", 
                "max_retries"
            ], 
            "properties": {
                "enabled": {
                    "type": "boolean", 
                    "description": "Administratively enable or disable this health check."
                }, 
                "delay": {
                    "type": "integer", 
                    "description": "Time in seconds  at which health check is repeated"
                }, 
                "expected_codes": {
                    "type": "string", 
                    "description": "In case monitor protocol is HTTP, expected return code for HTTP operations like\n200 ok."
                }, 
                "max_retries": {
                    "type": "integer", 
                    "description": "Number of failures before declaring health bad"
                }, 
                "health_check_type": {
                    "type": "string", 
                    "description": "Health check type, currently only link-local and end-to-end are supported"
                }, 
                "http_method": {
                    "type": "string", 
                    "description": "In case monitor protocol is HTTP, type of http method used like GET, PUT, POST\netc"
                }, 
                "timeout": {
                    "type": "integer", 
                    "description": "Time in seconds to wait for response"
                }, 
                "url_path": {
                    "type": "string", 
                    "description": "In case monitor protocol is HTTP, URL to be used. In case of ICMP, ip address"
                }, 
                "monitor_type": {
                    "type": "string", 
                    "description": "Protocol used to monitor health, currently only HTTP and ICMP(ping) is supported"
                }
            }
        }, 
        "ProviderAttachmentCreate": {
            "required": [
                "fq_name"
            ], 
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "virtual_router_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "fq_name": {
                    "$ref": "#/definitions/FQName"
                }
            }
        }, 
        "PermType2": {
            "required": [
                "owner", 
                "owner_access"
            ], 
            "properties": {
                "owner": {
                    "type": "string", 
                    "description": "Owner tenant of the object"
                }, 
                "owner_access": {
                    "type": "integer", 
                    "description": "Owner permissions of the object"
                }, 
                "global_access": {
                    "type": "integer", 
                    "description": "Globally(others) shared object and permissions for others of the object"
                }, 
                "share": {
                    "description": "Selectively shared object, List of (tenant, permissions)", 
                    "$ref": "#/definitions/ShareType"
                }
            }
        }, 
        "VirtualMachineRead": {
            "properties": {
                "service_instance_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }
                    ]
                }, 
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.", 
                    "$ref": "#/definitions/IdPermsType"
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "perms2": {
                    "description": "Permissions data for role based access.", 
                    "$ref": "#/definitions/PermType2"
                }
            }
        }, 
        "PolicyEntriesType": {
            "required": [
                "policy_rule"
            ], 
            "properties": {
                "policy_rule": {
                    "description": "List of policy rules", 
                    "$ref": "#/definitions/PolicyRuleType"
                }
            }
        }, 
        "BindingType": {
            "properties": {}
        }, 
        "ResourceCommon": {
            "required": [
                "fq_name", 
                "uuid"
            ], 
            "allOf": [
                {
                    "$ref": "#/definitions/FQName"
                }, 
                {
                    "$ref": "#/definitions/Uuid"
                }
            ]
        }, 
        "ConfigNodeCreate": {
            "required": [
                "fq_name"
            ], 
            "properties": {
                "config_node_ip_address": {
                    "type": "string", 
                    "description": "Ip address of the config node, set while provisioning."
                }, 
                "fq_name": {
                    "$ref": "#/definitions/FQName"
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }
            }
        }, 
        "RouteTargetCreate": {
            "required": [
                "fq_name"
            ], 
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "fq_name": {
                    "$ref": "#/definitions/FQName"
                }
            }
        }, 
        "VirtualMachineInterfaceRead": {
            "properties": {
                "physical_interface_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }
                    ]
                }, 
                "routing_instance_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }, 
                        {
                            "properties": {
                                "attr": {
                                    "$ref": "#/definitions/PolicyBasedForwardingRuleType"
                                }
                            }
                        }
                    ]
                }, 
                "virtual_machine_interface_mac_addresses": {
                    "description": "MAC address of the virtual machine interface, automatically assigned by system if not provided.", 
                    "$ref": "#/definitions/MacAddressesType"
                }, 
                "virtual_machine_interface_bindings": {
                    "description": "Dictionary of arbitrary (key, value) for this interface. Neutron port bindings use this.", 
                    "$ref": "#/definitions/KeyValuePairs"
                }, 
                "interface_route_table_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }
                    ]
                }, 
                "qos_config_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }
                    ]
                }, 
                "virtual_machine_interface_device_owner": {
                    "type": "string", 
                    "description": "For openstack compatibility, not used by system."
                }, 
                "service_health_check_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }
                    ]
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "security_group_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }
                    ]
                }, 
                "virtual_machine_interface_disable_policy": {
                    "type": "boolean", 
                    "description": "When True all policy checks for ingress and egress traffic from this interface are disabled. Flow\ntable entries are not created."
                }, 
                "port_tuple_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }
                    ]
                }, 
                "virtual_network_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }
                    ]
                }, 
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.", 
                    "$ref": "#/definitions/IdPermsType"
                }, 
                "virtual_machine_interface_properties": {
                    "description": "Virtual Machine Interface miscelenious configurations.", 
                    "$ref": "#/definitions/VirtualMachineInterfacePropertiesType"
                }, 
                "ecmp_hashing_include_fields": {
                    "description": "ECMP hashing config at global level.", 
                    "$ref": "#/definitions/EcmpHashingIncludeFields"
                }, 
                "virtual_machine_interface_host_routes": {
                    "description": "List of host routes(prefixes, nexthop) that are passed to VM via DHCP.", 
                    "$ref": "#/definitions/RouteTableType"
                }, 
                "virtual_machine_interface_allowed_address_pairs": {
                    "description": "List of (IP address, MAC) other than instance ip on this interface.", 
                    "$ref": "#/definitions/AllowedAddressPairs"
                }, 
                "virtual_machine_interface_fat_flow_protocols": {
                    "description": "List of (protocol, port number), for flows to interface with (protocol, destination port number),\nvrouter will ignore source port while setting up flow and ignore it as source port in reverse flow.\nHence many flows will map to single flow.", 
                    "$ref": "#/definitions/FatFlowProtocols"
                }, 
                "perms2": {
                    "description": "Permissions data for role based access.", 
                    "$ref": "#/definitions/PermType2"
                }, 
                "virtual_machine_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }
                    ]
                }, 
                "vrf_assign_table": {
                    "description": "VRF assignment policy for this interface, automatically generated by system.", 
                    "$ref": "#/definitions/VrfAssignTableType"
                }, 
                "virtual_machine_interface_dhcp_option_list": {
                    "description": "DHCP options configuration specific to this interface.", 
                    "$ref": "#/definitions/DhcpOptionsListType"
                }, 
                "virtual_machine_interface_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }
                    ]
                }
            }
        }, 
        "RoutingPolicyUpdate": {
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "routing_instance_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }, 
                        {
                            "properties": {
                                "attr": {
                                    "$ref": "#/definitions/RoutingPolicyType"
                                }
                            }
                        }
                    ]
                }, 
                "service_instance_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }, 
                        {
                            "properties": {
                                "attr": {
                                    "$ref": "#/definitions/RoutingPolicyServiceInstanceType"
                                }
                            }
                        }
                    ]
                }, 
                "routing_policy_entries": {
                    "$ref": "#/definitions/PolicyStatementType"
                }
            }
        }, 
        "CustomerAttachmentRead": {
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "virtual_machine_interface_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }
                    ]
                }, 
                "perms2": {
                    "description": "Permissions data for role based access.", 
                    "$ref": "#/definitions/PermType2"
                }, 
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.", 
                    "$ref": "#/definitions/IdPermsType"
                }, 
                "attachment_address": {
                    "$ref": "#/definitions/AttachmentAddressType"
                }, 
                "floating_ip_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }
                    ]
                }
            }
        }, 
        "GlobalSystemConfigCreate": {
            "required": [
                "fq_name", 
                "autonomous_system", 
                "bgp_router_refs"
            ], 
            "properties": {
                "user_defined_counter": {
                    "description": "counter name and patterns", 
                    "$ref": "#/definitions/UserDefinedCounterList"
                }, 
                "alarm_enable": {
                    "type": "boolean", 
                    "description": "Flag to enable/disable alarms configured under global-system-config. True, if not set."
                }, 
                "fq_name": {
                    "$ref": "#/definitions/FQName"
                }, 
                "graceful_restart_params": {
                    "description": "Graceful Restart parameters", 
                    "$ref": "#/definitions/GracefulRestartType"
                }, 
                "plugin_tuning": {
                    "description": "Various Orchestration system plugin(interface) parameters, like Openstack Neutron plugin.", 
                    "$ref": "#/definitions/PluginProperties"
                }, 
                "ibgp_auto_mesh": {
                    "type": "boolean", 
                    "description": "When true, system will automatically create BGP peering mesh with all control-nodes that have same\nBGP AS number as global AS number."
                }, 
                "bgp_router_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "ip_fabric_subnets": {
                    "description": "List of all subnets in which vrouter ip address exist. Used by Device manager to configure dynamic\nGRE tunnels on the SDN gateway.", 
                    "$ref": "#/definitions/SubnetListType"
                }, 
                "autonomous_system": {
                    "minimum": 1, 
                    "type": "number", 
                    "maximum": 65534, 
                    "description": "16 bit BGP Autonomous System number for the cluster."
                }
            }
        }, 
        "PhysicalRouterUpdate": {
            "properties": {
                "physical_router_management_ip": {
                    "type": "string", 
                    "description": "Management ip for this physical router. It is used by the device manager to perform netconf and by\nSNMP collector if enabled."
                }, 
                "physical_router_snmp_credentials": {
                    "description": "SNMP credentials for the physical router used by SNMP colloctor.", 
                    "$ref": "#/definitions/SNMPCredentials"
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "physical_router_vendor_name": {
                    "type": "string", 
                    "description": "Vendor name of the physical router (e.g juniper). Used by the device manager to select driver."
                }, 
                "physical_router_product_name": {
                    "type": "string", 
                    "description": "Model name of the physical router (e.g juniper). Used by the device manager to select driver."
                }, 
                "virtual_network_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "virtual_router_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "bgp_router_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "physical_router_user_credentials": {
                    "description": "Username and password for netconf to the physical router by device manager.", 
                    "$ref": "#/definitions/UserCredentials"
                }, 
                "physical_router_vnc_managed": {
                    "type": "boolean", 
                    "description": "This physical router is enabled to be configured by device manager."
                }, 
                "physical_router_dataplane_ip": {
                    "type": "string", 
                    "description": "This is ip address in the ip-fabric(underlay) network that can be used in data palne by physical\nrouter. Usually it is the VTEP address in VxLAN for the TOR switch."
                }, 
                "physical_router_junos_service_ports": {
                    "description": "Juniper JUNOS specific sevice interfaces name  to perform services like NAT.", 
                    "$ref": "#/definitions/JunosServicePorts"
                }
            }
        }, 
        "KeyValuePair": {
            "properties": {
                "value": {
                    "type": "string"
                }, 
                "key": {
                    "type": "string"
                }
            }
        }, 
        "FlowAgingTimeout": {
            "properties": {
                "timeout_in_seconds": {
                    "type": "integer"
                }, 
                "protocol": {
                    "type": "string"
                }, 
                "port": {
                    "type": "integer"
                }
            }
        }, 
        "RouteTargetList": {
            "properties": {
                "route_target": {
                    "type": "string"
                }
            }
        }, 
        "VirtualMachineCreate": {
            "required": [
                "fq_name"
            ], 
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "service_instance_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "fq_name": {
                    "$ref": "#/definitions/FQName"
                }
            }
        }, 
        "ResourceReferenceCreate": {
            "required": [
                "to"
            ], 
            "allOf": [
                {
                    "$ref": "#/definitions/To"
                }
            ]
        }, 
        "DatabaseNodeRead": {
            "properties": {
                "database_node_ip_address": {
                    "type": "string", 
                    "description": "Ip address of the database node, set while provisioning."
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.", 
                    "$ref": "#/definitions/IdPermsType"
                }, 
                "perms2": {
                    "description": "Permissions data for role based access.", 
                    "$ref": "#/definitions/PermType2"
                }
            }
        }, 
        "Type": {
            "required": [
                "type"
            ], 
            "properties": {
                "type": {
                    "type": "string"
                }
            }
        }, 
        "DsaRuleRead": {
            "properties": {
                "dsa_rule_entry": {
                    "description": "rule entry defining pubisher set and subscriber set.", 
                    "$ref": "#/definitions/DiscoveryServiceAssignmentType"
                }, 
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.", 
                    "$ref": "#/definitions/IdPermsType"
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "perms2": {
                    "description": "Permissions data for role based access.", 
                    "$ref": "#/definitions/PermType2"
                }
            }
        }, 
        "AlarmExpression": {
            "required": [
                "operation", 
                "operand1", 
                "operand2"
            ], 
            "properties": {
                "operation": {
                    "type": "string", 
                    "description": "operation to compare operand1 and operand2"
                }, 
                "operand1": {
                    "type": "string", 
                    "description": "UVE attribute specified in the dotted format. Example:\nNodeStatus.process_info.process_state"
                }, 
                "vars": {
                    "type": "string", 
                    "description": "List of UVE attributes that would be useful when the alarm is raised. For\nexample, user may want to raise an alarm if the\nNodeStatus.process_info.process_state != PROCESS_STATE_RUNNING. But, it would be\nuseful to know the process_name whose state != PROCESS_STATE_RUNNING. This UVE\nattribute which is neither part of operand1 nor operand2 may be specified in\nvars"
                }, 
                "operand2": {
                    "type": "string", 
                    "description": "UVE attribute or a json value to compare with the UVE attribute in operand1.\nnull value can be specified to check if operand1 exists using the operator != or\n=="
                }
            }
        }, 
        "ServiceInstanceCreate": {
            "required": [
                "fq_name", 
                "service_instance_properties", 
                "service_template_refs"
            ], 
            "properties": {
                "fq_name": {
                    "$ref": "#/definitions/FQName"
                }, 
                "service_instance_bindings": {
                    "description": "Opaque key value pair for generating config for the service instance.", 
                    "$ref": "#/definitions/KeyValuePairs"
                }, 
                "service_instance_properties": {
                    "description": "Service instance configuration parameters.", 
                    "$ref": "#/definitions/ServiceInstanceType"
                }, 
                "instance_ip_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }, 
                        {
                            "properties": {
                                "attr": {
                                    "$ref": "#/definitions/ServiceInterfaceTag"
                                }
                            }
                        }
                    ]
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "service_template_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }
            }
        }, 
        "LoadbalancerMemberUpdate": {
            "properties": {
                "loadbalancer_member_properties": {
                    "$ref": "#/definitions/LoadbalancerMemberType"
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }
            }
        }, 
        "VirtualRouterRead": {
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "virtual_router_ip_address": {
                    "type": "string", 
                    "description": "Ip address of the virtual router."
                }, 
                "virtual_router_dpdk_enabled": {
                    "type": "boolean", 
                    "description": "This vrouter's data path is using DPDK librarry, Virtual machines interfaces scheduled on this\ncompute node will be tagged with aditional flags so that they are spawned with user space virtio\ndriver. It is only applicable for embedded vrouter."
                }, 
                "perms2": {
                    "description": "Permissions data for role based access.", 
                    "$ref": "#/definitions/PermType2"
                }, 
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.", 
                    "$ref": "#/definitions/IdPermsType"
                }, 
                "virtual_machine_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }
                    ]
                }, 
                "virtual_router_type": {
                    "type": "string", 
                    "description": "Different types of the vrouters in the system."
                }
            }
        }, 
        "ConfigRootUpdate": {
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }
            }
        }, 
        "PortTupleRead": {
            "properties": {
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.", 
                    "$ref": "#/definitions/IdPermsType"
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "bgp_router_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }
                    ]
                }, 
                "perms2": {
                    "description": "Permissions data for role based access.", 
                    "$ref": "#/definitions/PermType2"
                }
            }
        }, 
        "StaticRouteEntriesType": {
            "properties": {
                "route": {
                    "$ref": "#/definitions/StaticRouteType"
                }
            }
        }, 
        "BgpPrefixLimit": {
            "properties": {
                "maximum": {
                    "type": "integer"
                }
            }
        }, 
        "NetworkIpamUpdate": {
            "properties": {
                "network_ipam_mgmt": {
                    "description": "Network IP Address Management configuration.", 
                    "$ref": "#/definitions/IpamType"
                }, 
                "virtual_DNS_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }
            }
        }, 
        "QosQueueUpdate": {
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "max_bandwidth": {
                    "type": "number", 
                    "description": "Maximum bandwidth for this queue."
                }, 
                "min_bandwidth": {
                    "type": "number", 
                    "description": "Minimum bandwidth for this queue."
                }
            }
        }, 
        "ServiceInstanceRead": {
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "route_aggregate_back_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }, 
                        {
                            "properties": {
                                "attr": {
                                    "$ref": "#/definitions/ServiceInterfaceTag"
                                }
                            }
                        }
                    ]
                }, 
                "port_tuple_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }
                    ]
                }, 
                "interface_route_table_back_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }, 
                        {
                            "properties": {
                                "attr": {
                                    "$ref": "#/definitions/ServiceInterfaceTag"
                                }
                            }
                        }
                    ]
                }, 
                "service_instance_bindings": {
                    "description": "Opaque key value pair for generating config for the service instance.", 
                    "$ref": "#/definitions/KeyValuePairs"
                }, 
                "service_instance_properties": {
                    "description": "Service instance configuration parameters.", 
                    "$ref": "#/definitions/ServiceInstanceType"
                }, 
                "perms2": {
                    "description": "Permissions data for role based access.", 
                    "$ref": "#/definitions/PermType2"
                }, 
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.", 
                    "$ref": "#/definitions/IdPermsType"
                }, 
                "instance_ip_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }, 
                        {
                            "properties": {
                                "attr": {
                                    "$ref": "#/definitions/ServiceInterfaceTag"
                                }
                            }
                        }
                    ]
                }, 
                "routing_policy_back_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }, 
                        {
                            "properties": {
                                "attr": {
                                    "$ref": "#/definitions/RoutingPolicyServiceInstanceType"
                                }
                            }
                        }
                    ]
                }, 
                "service_template_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }
                    ]
                }, 
                "service_health_check_back_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }, 
                        {
                            "properties": {
                                "attr": {
                                    "$ref": "#/definitions/ServiceInterfaceTag"
                                }
                            }
                        }
                    ]
                }
            }
        }, 
        "PrefixMatchType": {
            "properties": {
                "prefix_type": {
                    "type": "string"
                }, 
                "prefix": {
                    "type": "string"
                }
            }
        }, 
        "AddressFamilies": {
            "properties": {
                "family": {
                    "type": "string"
                }
            }
        }, 
        "MatchConditionType": {
            "required": [
                "protocol", 
                "src_address", 
                "src_port", 
                "dst_address", 
                "dst_port", 
                "ethertype"
            ], 
            "properties": {
                "src_port": {
                    "description": "Range of source port for layer 4 protocol", 
                    "$ref": "#/definitions/PortType"
                }, 
                "src_address": {
                    "description": "Source ip matching criteria", 
                    "$ref": "#/definitions/AddressType"
                }, 
                "ethertype": {
                    "type": "string"
                }, 
                "dst_address": {
                    "description": "Destination ip matching criteria", 
                    "$ref": "#/definitions/AddressType"
                }, 
                "dst_port": {
                    "description": "Range of destination  port for layer 4 protocol", 
                    "$ref": "#/definitions/PortType"
                }, 
                "protocol": {
                    "type": "string", 
                    "description": "Layer 4 protocol in ip packet"
                }
            }
        }, 
        "SNMPCredentials": {
            "properties": {
                "v3_privacy_protocol": {
                    "type": "string"
                }, 
                "retries": {
                    "type": "integer"
                }, 
                "v3_authentication_password": {
                    "type": "string"
                }, 
                "v3_engine_time": {
                    "type": "integer"
                }, 
                "v3_engine_id": {
                    "type": "string"
                }, 
                "local_port": {
                    "type": "integer"
                }, 
                "v3_security_level": {
                    "type": "string"
                }, 
                "v3_context": {
                    "type": "string"
                }, 
                "v3_security_name": {
                    "type": "string"
                }, 
                "v3_authentication_protocol": {
                    "type": "string"
                }, 
                "v2_community": {
                    "type": "string"
                }, 
                "v3_security_engine_id": {
                    "type": "string"
                }, 
                "v3_context_engine_id": {
                    "type": "string"
                }, 
                "version": {
                    "type": "integer"
                }, 
                "timeout": {
                    "type": "integer"
                }, 
                "v3_privacy_password": {
                    "type": "string"
                }, 
                "v3_engine_boots": {
                    "type": "integer"
                }
            }
        }, 
        "RouteAggregateUpdate": {
            "properties": {
                "aggregate_route_entries": {
                    "$ref": "#/definitions/RouteListType"
                }, 
                "routing_instance_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "service_instance_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }, 
                        {
                            "properties": {
                                "attr": {
                                    "$ref": "#/definitions/ServiceInterfaceTag"
                                }
                            }
                        }
                    ]
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "aggregate_route_nexthop": {
                    "type": "string"
                }
            }
        }, 
        "QosIdForwardingClassPairs": {
            "properties": {
                "qos_id_forwarding_class_pair": {
                    "$ref": "#/definitions/QosIdForwardingClassPair"
                }
            }
        }, 
        "ServiceApplianceSetUpdate": {
            "properties": {
                "service_appliance_set_properties": {
                    "description": "List of Key:Value pairs that are used by the provider driver and opaque to system.", 
                    "$ref": "#/definitions/KeyValuePairs"
                }, 
                "service_appliance_ha_mode": {
                    "type": "string", 
                    "description": "High availability mode for the service appliance set, active-active or active-backup."
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "service_appliance_driver": {
                    "type": "string", 
                    "description": "Name of the provider driver for this service appliance set."
                }
            }
        }, 
        "AliasIpPoolRead": {
            "properties": {
                "alias_ip_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }
                    ]
                }, 
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.", 
                    "$ref": "#/definitions/IdPermsType"
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "perms2": {
                    "description": "Permissions data for role based access.", 
                    "$ref": "#/definitions/PermType2"
                }
            }
        }, 
        "PortType": {
            "required": [
                "start_port", 
                "end_port"
            ], 
            "properties": {
                "end_port": {
                    "type": "integer"
                }, 
                "start_port": {
                    "type": "integer"
                }
            }
        }, 
        "RoutingPolicyRead": {
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "perms2": {
                    "description": "Permissions data for role based access.", 
                    "$ref": "#/definitions/PermType2"
                }, 
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.", 
                    "$ref": "#/definitions/IdPermsType"
                }, 
                "routing_policy_entries": {
                    "$ref": "#/definitions/PolicyStatementType"
                }, 
                "routing_instance_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }, 
                        {
                            "properties": {
                                "attr": {
                                    "$ref": "#/definitions/RoutingPolicyType"
                                }
                            }
                        }
                    ]
                }, 
                "service_instance_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }, 
                        {
                            "properties": {
                                "attr": {
                                    "$ref": "#/definitions/RoutingPolicyServiceInstanceType"
                                }
                            }
                        }
                    ]
                }
            }
        }, 
        "LoadbalancerHealthmonitorCreate": {
            "required": [
                "fq_name"
            ], 
            "properties": {
                "loadbalancer_healthmonitor_properties": {
                    "$ref": "#/definitions/LoadbalancerHealthmonitorType"
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "fq_name": {
                    "$ref": "#/definitions/FQName"
                }
            }
        }, 
        "TermActionListType": {
            "properties": {
                "action": {
                    "type": "string"
                }, 
                "update": {
                    "$ref": "#/definitions/ActionUpdateType"
                }
            }
        }, 
        "ProviderAttachmentUpdate": {
            "properties": {
                "virtual_router_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }
            }
        }, 
        "TypeFQName": {
            "allOf": [
                {
                    "$ref": "#/definitions/Type"
                }, 
                {
                    "$ref": "#/definitions/FQName"
                }
            ]
        }, 
        "RoutingInstanceRead": {
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "routing_instance_back_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }, 
                        {
                            "properties": {
                                "attr": {
                                    "$ref": "#/definitions/ConnectionType"
                                }
                            }
                        }
                    ]
                }, 
                "routing_instance_has_pnf": {
                    "type": "boolean"
                }, 
                "routing_instance_is_default": {
                    "type": "boolean"
                }, 
                "virtual_machine_interface_back_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }, 
                        {
                            "properties": {
                                "attr": {
                                    "$ref": "#/definitions/PolicyBasedForwardingRuleType"
                                }
                            }
                        }
                    ]
                }, 
                "routing_policy_back_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }, 
                        {
                            "properties": {
                                "attr": {
                                    "$ref": "#/definitions/RoutingPolicyType"
                                }
                            }
                        }
                    ]
                }, 
                "perms2": {
                    "description": "Permissions data for role based access.", 
                    "$ref": "#/definitions/PermType2"
                }, 
                "service_chain_information": {
                    "$ref": "#/definitions/ServiceChainInfo"
                }, 
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.", 
                    "$ref": "#/definitions/IdPermsType"
                }, 
                "ipv6_service_chain_information": {
                    "$ref": "#/definitions/ServiceChainInfo"
                }, 
                "static_route_entries": {
                    "$ref": "#/definitions/StaticRouteEntriesType"
                }, 
                "route_target_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }
                    ]
                }, 
                "routing_instance_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }, 
                        {
                            "properties": {
                                "attr": {
                                    "$ref": "#/definitions/ConnectionType"
                                }
                            }
                        }
                    ]
                }, 
                "default_ce_protocol": {
                    "$ref": "#/definitions/DefaultProtocolType"
                }
            }
        }, 
        "RouteTargetUpdate": {
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }
            }
        }, 
        "InstanceIpCreate": {
            "required": [
                "fq_name", 
                "instance_ip_address", 
                "virtual_network_refs"
            ], 
            "properties": {
                "fq_name": {
                    "$ref": "#/definitions/FQName"
                }, 
                "service_health_check_ip": {
                    "type": "boolean", 
                    "description": "This instance ip is used as service health check source ip"
                }, 
                "secondary_ip_tracking_ip": {
                    "description": "When this instance ip is secondary ip, it can track activeness of another ip.", 
                    "$ref": "#/definitions/SubnetType"
                }, 
                "instance_ip_address": {
                    "type": "string", 
                    "description": "Ip address value for instance ip."
                }, 
                "virtual_machine_interface_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "instance_ip_mode": {
                    "type": "string", 
                    "description": "Ip address HA mode in case this instance ip is used in more than one interface, active-Active or\nactive-Standby."
                }, 
                "subnet_uuid": {
                    "type": "string", 
                    "description": "This instance ip was allocated from this Subnet(UUID)."
                }, 
                "instance_ip_family": {
                    "type": "string", 
                    "description": "Ip address family for instance ip, IPv4(v4) or IPv6(v6)."
                }, 
                "service_instance_ip": {
                    "type": "boolean", 
                    "description": "This instance ip is used as service chain next hop"
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "physical_router_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "virtual_network_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "instance_ip_secondary": {
                    "type": "boolean", 
                    "description": "This instance ip is secondary ip of the interface."
                }
            }
        }, 
        "ConnectionType": {
            "properties": {
                "destination_instance": {
                    "type": "string"
                }
            }
        }, 
        "QosQueueCreate": {
            "required": [
                "fq_name", 
                "min_bandwidth", 
                "max_bandwidth"
            ], 
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "fq_name": {
                    "$ref": "#/definitions/FQName"
                }, 
                "max_bandwidth": {
                    "type": "number", 
                    "description": "Maximum bandwidth for this queue."
                }, 
                "min_bandwidth": {
                    "type": "number", 
                    "description": "Minimum bandwidth for this queue."
                }
            }
        }, 
        "ProjectUpdate": {
            "properties": {
                "alias_ip_pool_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "floating_ip_pool_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "quota": {
                    "description": "Max instances limits for various objects under project.", 
                    "$ref": "#/definitions/QuotaType"
                }, 
                "namespace_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }, 
                        {
                            "properties": {
                                "attr": {
                                    "$ref": "#/definitions/SubnetType"
                                }
                            }
                        }
                    ]
                }, 
                "alarm_enable": {
                    "type": "boolean", 
                    "description": "Flag to enable/disable alarms configured under global-system-config. True, if not set."
                }
            }
        }, 
        "ApiAccessListRead": {
            "properties": {
                "api_access_list_entries": {
                    "description": "List of rules e.g network.* => admin:CRUD (admin can perform all ops on networks).", 
                    "$ref": "#/definitions/RbacRuleEntriesType"
                }, 
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.", 
                    "$ref": "#/definitions/IdPermsType"
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "perms2": {
                    "description": "Permissions data for role based access.", 
                    "$ref": "#/definitions/PermType2"
                }
            }
        }, 
        "DomainLimitsType": {
            "properties": {
                "project_limit": {
                    "type": "integer", 
                    "description": "Maximum number of projects allowed in this domian"
                }, 
                "virtual_network_limit": {
                    "type": "integer", 
                    "description": "Maximum number of virtual networks allowed in this domian"
                }, 
                "security_group_limit": {
                    "type": "integer", 
                    "description": "Maximum number of security groups allowed in this domian"
                }
            }
        }, 
        "ProtocolBgpType": {
            "properties": {}
        }, 
        "DiscoveryPubSubEndPointType": {
            "required": [
                "ep_type"
            ], 
            "properties": {
                "ep_version": {
                    "type": "string", 
                    "description": "All  servers or clients whose version match this version"
                }, 
                "ep_id": {
                    "type": "string", 
                    "description": "Specific service or client which is set of one."
                }, 
                "ep_type": {
                    "type": "string"
                }, 
                "ep_prefix": {
                    "description": "All  servers or clients whose ip match this prefix", 
                    "$ref": "#/definitions/SubnetType"
                }
            }
        }, 
        "IpamDnsAddressType": {
            "properties": {
                "tenant_dns_server_address": {
                    "description": "In case of tenant DNS server method, Ip address of DNS server. This will be\ngiven in DHCP", 
                    "$ref": "#/definitions/IpAddressesType"
                }, 
                "virtual_dns_server_name": {
                    "type": "string", 
                    "description": "In case of virtual DNS server, name of virtual DNS server"
                }
            }
        }, 
        "ServiceHealthCheckCreate": {
            "required": [
                "fq_name", 
                "service_health_check_properties"
            ], 
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "service_health_check_properties": {
                    "description": "Service health check has following fields.", 
                    "$ref": "#/definitions/ServiceHealthCheckType"
                }, 
                "service_instance_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }, 
                        {
                            "properties": {
                                "attr": {
                                    "$ref": "#/definitions/ServiceInterfaceTag"
                                }
                            }
                        }
                    ]
                }, 
                "fq_name": {
                    "$ref": "#/definitions/FQName"
                }
            }
        }, 
        "VirtualRouterUpdate": {
            "properties": {
                "virtual_router_dpdk_enabled": {
                    "type": "boolean", 
                    "description": "This vrouter's data path is using DPDK librarry, Virtual machines interfaces scheduled on this\ncompute node will be tagged with aditional flags so that they are spawned with user space virtio\ndriver. It is only applicable for embedded vrouter."
                }, 
                "virtual_machine_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "virtual_router_ip_address": {
                    "type": "string", 
                    "description": "Ip address of the virtual router."
                }
            }
        }, 
        "NetworkPolicyRead": {
            "properties": {
                "virtual_network_back_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }, 
                        {
                            "properties": {
                                "attr": {
                                    "$ref": "#/definitions/VirtualNetworkPolicyType"
                                }
                            }
                        }
                    ]
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.", 
                    "$ref": "#/definitions/IdPermsType"
                }, 
                "network_policy_entries": {
                    "description": "Network policy rule entries.", 
                    "$ref": "#/definitions/PolicyEntriesType"
                }, 
                "perms2": {
                    "description": "Permissions data for role based access.", 
                    "$ref": "#/definitions/PermType2"
                }
            }
        }, 
        "UuidType": {
            "properties": {
                "uuid_mslong": {
                    "type": "number", 
                    "format": "double"
                }, 
                "uuid_lslong": {
                    "type": "number", 
                    "format": "double"
                }
            }
        }, 
        "VirtualIpType": {
            "properties": {
                "status": {
                    "type": "string"
                }, 
                "status_description": {
                    "type": "string"
                }, 
                "protocol": {
                    "type": "string"
                }, 
                "subnet_id": {
                    "type": "string"
                }, 
                "persistence_cookie_name": {
                    "type": "string"
                }, 
                "connection_limit": {
                    "type": "integer"
                }, 
                "persistence_type": {
                    "type": "string"
                }, 
                "admin_state": {
                    "type": "boolean"
                }, 
                "address": {
                    "type": "string", 
                    "description": "String of standard notation of ipv4 or ipv6 address"
                }, 
                "protocol_port": {
                    "type": "integer"
                }
            }
        }, 
        "DefaultProtocolType": {
            "properties": {
                "bgp": {
                    "$ref": "#/definitions/ProtocolBgpType"
                }, 
                "ospf": {
                    "$ref": "#/definitions/ProtocolOspfType"
                }
            }
        }, 
        "UserDefinedCounterList": {
            "properties": {
                "counter": {
                    "$ref": "#/definitions/UserDefinedCounter"
                }
            }
        }, 
        "ResourceReferenceRead": {
            "required": [
                "to", 
                "href", 
                "uuid"
            ], 
            "allOf": [
                {
                    "$ref": "#/definitions/Href"
                }, 
                {
                    "$ref": "#/definitions/Uuid"
                }, 
                {
                    "$ref": "#/definitions/To"
                }
            ]
        }, 
        "DiscoveryServiceAssignmentUpdate": {
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }
            }
        }, 
        "InterfaceRouteTableCreate": {
            "required": [
                "fq_name", 
                "interface_route_table_routes"
            ], 
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "service_instance_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }, 
                        {
                            "properties": {
                                "attr": {
                                    "$ref": "#/definitions/ServiceInterfaceTag"
                                }
                            }
                        }
                    ]
                }, 
                "fq_name": {
                    "$ref": "#/definitions/FQName"
                }, 
                "interface_route_table_routes": {
                    "description": "Interface route table used same structure as route table, however the next hop field is irrelevent.", 
                    "$ref": "#/definitions/RouteTableType"
                }
            }
        }, 
        "LoadbalancerMemberRead": {
            "properties": {
                "loadbalancer_member_properties": {
                    "$ref": "#/definitions/LoadbalancerMemberType"
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.", 
                    "$ref": "#/definitions/IdPermsType"
                }, 
                "perms2": {
                    "description": "Permissions data for role based access.", 
                    "$ref": "#/definitions/PermType2"
                }
            }
        }, 
        "LinklocalServiceEntryType": {
            "required": [
                "linklocal_service_name", 
                "linklocal_service_ip", 
                "linklocal_service_port", 
                "ip_fabric_service_port"
            ], 
            "properties": {
                "ip_fabric_service_ip": {
                    "type": "string", 
                    "description": "Destination ip address to which link local traffic will forwarded"
                }, 
                "linklocal_service_name": {
                    "type": "string", 
                    "description": "Name of the link local service. VM name resolution of this name will result in\nlink local ip address"
                }, 
                "linklocal_service_ip": {
                    "type": "string", 
                    "description": "ip address of the link local service."
                }, 
                "ip_fabric_service_port": {
                    "type": "integer", 
                    "description": "Destination TCP port number to which link local traffic will forwarded"
                }, 
                "ip_fabric_DNS_service_name": {
                    "type": "string", 
                    "description": "DNS name to which link local service will be proxied"
                }, 
                "linklocal_service_port": {
                    "type": "integer", 
                    "description": "Destination TCP port number of link local service"
                }
            }
        }, 
        "ProjectCreate": {
            "required": [
                "fq_name", 
                "quota"
            ], 
            "properties": {
                "alias_ip_pool_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "floating_ip_pool_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "quota": {
                    "description": "Max instances limits for various objects under project.", 
                    "$ref": "#/definitions/QuotaType"
                }, 
                "namespace_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }, 
                        {
                            "properties": {
                                "attr": {
                                    "$ref": "#/definitions/SubnetType"
                                }
                            }
                        }
                    ]
                }, 
                "fq_name": {
                    "$ref": "#/definitions/FQName"
                }, 
                "alarm_enable": {
                    "type": "boolean", 
                    "description": "Flag to enable/disable alarms configured under global-system-config. True, if not set."
                }
            }
        }, 
        "CommunityAttributes": {
            "properties": {
                "community_attribute": {
                    "type": "string", 
                    "description": "List of Community attributes, it indicates the attributes with which the routes\nare tagged while publishing.\nThe attributes will be represented as bgp community in the path attribute.\nEach attribute is indicated as string.\n    1. String with two integers separated by \":\". E.g. \"64512:123\"\n    2. Well-known community as string.\n       Possible values are \"no-export\" \"accept-own\" \"no-advertise\" \"no-export-\nsubconfed\" \"no-reoriginate\""
                }
            }
        }, 
        "ProviderDetails": {
            "properties": {
                "segmentation_id": {
                    "type": "integer"
                }, 
                "physical_network": {
                    "type": "string"
                }
            }
        }, 
        "GlobalVrouterConfigUpdate": {
            "properties": {
                "ecmp_hashing_include_fields": {
                    "description": "ECMP hashing config at global level.", 
                    "$ref": "#/definitions/EcmpHashingIncludeFields"
                }, 
                "flow_aging_timeout_list": {
                    "description": "Flow aging timeout per application (protocol, port) list.", 
                    "$ref": "#/definitions/FlowAgingTimeoutList"
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "forwarding_mode": {
                    "type": "string", 
                    "description": "Packet forwarding mode for this system L2-only, L3-only OR L2-L3. L2-L3 is default."
                }, 
                "flow_export_rate": {
                    "type": "number", 
                    "description": "Flow export rate is global config, rate at which each vrouter will sample and export flow records to\nanalytics"
                }, 
                "linklocal_services": {
                    "description": "Global services provided on link local subnet to the virtual machines.", 
                    "$ref": "#/definitions/LinklocalServicesTypes"
                }, 
                "encapsulation_priorities": {
                    "description": "Ordered list of enapsulations that vrouter will use in priority order.", 
                    "$ref": "#/definitions/EncapsulationPrioritiesType"
                }, 
                "vxlan_network_identifier_mode": {
                    "type": "string", 
                    "description": "Method of allocation of VxLAN VNI(s). Set at provision time and cannot be changed.\n    configured = VxLAN VNI is given by user when virtual network is configured.\n    automatic = System will allocate VxLAN VNI automatically."
                }
            }
        }, 
        "FloatingIpPoolCreate": {
            "required": [
                "fq_name"
            ], 
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "fq_name": {
                    "$ref": "#/definitions/FQName"
                }, 
                "floating_ip_pool_prefixes": {
                    "description": "List of ip prefixes that restrict foating ip allocation from the corresponding virtual network.(Not\nyet implemented).", 
                    "$ref": "#/definitions/FloatingIpPoolType"
                }
            }
        }, 
        "PhysicalRouterCreate": {
            "required": [
                "fq_name", 
                "physical_router_management_ip", 
                "physical_router_vendor_name", 
                "physical_router_product_name"
            ], 
            "properties": {
                "physical_router_management_ip": {
                    "type": "string", 
                    "description": "Management ip for this physical router. It is used by the device manager to perform netconf and by\nSNMP collector if enabled."
                }, 
                "physical_router_snmp_credentials": {
                    "description": "SNMP credentials for the physical router used by SNMP colloctor.", 
                    "$ref": "#/definitions/SNMPCredentials"
                }, 
                "fq_name": {
                    "$ref": "#/definitions/FQName"
                }, 
                "physical_router_vendor_name": {
                    "type": "string", 
                    "description": "Vendor name of the physical router (e.g juniper). Used by the device manager to select driver."
                }, 
                "physical_router_product_name": {
                    "type": "string", 
                    "description": "Model name of the physical router (e.g juniper). Used by the device manager to select driver."
                }, 
                "virtual_network_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "virtual_router_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "bgp_router_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "physical_router_user_credentials": {
                    "description": "Username and password for netconf to the physical router by device manager.", 
                    "$ref": "#/definitions/UserCredentials"
                }, 
                "physical_router_vnc_managed": {
                    "type": "boolean", 
                    "description": "This physical router is enabled to be configured by device manager."
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "physical_router_dataplane_ip": {
                    "type": "string", 
                    "description": "This is ip address in the ip-fabric(underlay) network that can be used in data palne by physical\nrouter. Usually it is the VTEP address in VxLAN for the TOR switch."
                }, 
                "physical_router_junos_service_ports": {
                    "description": "Juniper JUNOS specific sevice interfaces name  to perform services like NAT.", 
                    "$ref": "#/definitions/JunosServicePorts"
                }
            }
        }, 
        "FloatingIpPoolType": {
            "properties": {
                "subnet": {
                    "description": "Block of ipaddresses for floating ip allocation. Currently not supported", 
                    "$ref": "#/definitions/SubnetType"
                }
            }
        }, 
        "VirtualIpUpdate": {
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "virtual_ip_properties": {
                    "$ref": "#/definitions/VirtualIpType"
                }, 
                "virtual_machine_interface_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "loadbalancer_pool_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }
            }
        }, 
        "MacAddressesType": {
            "properties": {
                "mac_address": {
                    "type": "string"
                }
            }
        }, 
        "GlobalVrouterConfigRead": {
            "properties": {
                "ecmp_hashing_include_fields": {
                    "description": "ECMP hashing config at global level.", 
                    "$ref": "#/definitions/EcmpHashingIncludeFields"
                }, 
                "flow_aging_timeout_list": {
                    "description": "Flow aging timeout per application (protocol, port) list.", 
                    "$ref": "#/definitions/FlowAgingTimeoutList"
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "forwarding_mode": {
                    "type": "string", 
                    "description": "Packet forwarding mode for this system L2-only, L3-only OR L2-L3. L2-L3 is default."
                }, 
                "flow_export_rate": {
                    "type": "number", 
                    "description": "Flow export rate is global config, rate at which each vrouter will sample and export flow records to\nanalytics"
                }, 
                "linklocal_services": {
                    "description": "Global services provided on link local subnet to the virtual machines.", 
                    "$ref": "#/definitions/LinklocalServicesTypes"
                }, 
                "perms2": {
                    "description": "Permissions data for role based access.", 
                    "$ref": "#/definitions/PermType2"
                }, 
                "encapsulation_priorities": {
                    "description": "Ordered list of enapsulations that vrouter will use in priority order.", 
                    "$ref": "#/definitions/EncapsulationPrioritiesType"
                }, 
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.", 
                    "$ref": "#/definitions/IdPermsType"
                }, 
                "vxlan_network_identifier_mode": {
                    "type": "string", 
                    "description": "Method of allocation of VxLAN VNI(s). Set at provision time and cannot be changed.\n    configured = VxLAN VNI is given by user when virtual network is configured.\n    automatic = System will allocate VxLAN VNI automatically."
                }
            }
        }, 
        "LoadbalancerPoolCreate": {
            "required": [
                "fq_name"
            ], 
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "service_appliance_set_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "virtual_machine_interface_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "loadbalancer_pool_provider": {
                    "type": "string"
                }, 
                "loadbalancer_listener_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "fq_name": {
                    "$ref": "#/definitions/FQName"
                }, 
                "loadbalancer_pool_properties": {
                    "$ref": "#/definitions/LoadbalancerPoolType"
                }, 
                "service_instance_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "loadbalancer_pool_custom_attributes": {
                    "$ref": "#/definitions/KeyValuePairs"
                }, 
                "loadbalancer_healthmonitor_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }
            }
        }, 
        "ResourceListSummary": {
            "allOf": [
                {
                    "$ref": "#/definitions/FQName"
                }, 
                {
                    "$ref": "#/definitions/Uuid"
                }, 
                {
                    "$ref": "#/definitions/Href"
                }
            ]
        }, 
        "DiscoveryServiceAssignmentCreate": {
            "required": [
                "fq_name"
            ], 
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "fq_name": {
                    "$ref": "#/definitions/FQName"
                }
            }
        }, 
        "AlarmAndList": {
            "properties": {
                "and_list": {
                    "$ref": "#/definitions/AlarmExpression"
                }
            }
        }, 
        "BgpAsAServiceCreate": {
            "required": [
                "fq_name", 
                "autonomous_system", 
                "bgpaas_ip_address", 
                "bgpaas_session_attributes", 
                "virtual_machine_interface_refs"
            ], 
            "properties": {
                "bgpaas_session_attributes": {
                    "description": "BGP peering session attributes.", 
                    "$ref": "#/definitions/BgpSessionAttributes"
                }, 
                "fq_name": {
                    "$ref": "#/definitions/FQName"
                }, 
                "bgpaas_suppress_route_advertisement": {
                    "type": "boolean", 
                    "description": "True when server should not advertise any routes to the client i.e. the client has static routes\n(typically a default) configured."
                }, 
                "bgpaas_ipv4_mapped_ipv6_nexthop": {
                    "type": "boolean", 
                    "description": "True when client bgp implementation expects to receive a ipv4-mapped ipv6 address (as opposed to\nregular ipv6 address) as the bgp nexthop for ipv6 routes."
                }, 
                "virtual_machine_interface_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "bgp_router_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "bgpaas_ip_address": {
                    "type": "string", 
                    "description": "Ip address of the BGP peer."
                }, 
                "autonomous_system": {
                    "minimum": 1, 
                    "type": "number", 
                    "maximum": 65534, 
                    "description": "16 bit BGP Autonomous System number for the cluster."
                }
            }
        }, 
        "PortTupleUpdate": {
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }
            }
        }, 
        "AccessControlListRead": {
            "properties": {
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.", 
                    "$ref": "#/definitions/IdPermsType"
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "access_control_list_entries": {
                    "description": "Automatically generated by system based on security groups or network policies.", 
                    "$ref": "#/definitions/AclEntriesType"
                }, 
                "perms2": {
                    "description": "Permissions data for role based access.", 
                    "$ref": "#/definitions/PermType2"
                }
            }
        }, 
        "PhysicalInterfaceCreate": {
            "required": [
                "fq_name"
            ], 
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "physical_interface_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "fq_name": {
                    "$ref": "#/definitions/FQName"
                }
            }
        }, 
        "LoadbalancerHealthmonitorRead": {
            "properties": {
                "loadbalancer_healthmonitor_properties": {
                    "$ref": "#/definitions/LoadbalancerHealthmonitorType"
                }, 
                "physical_interface_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }
                    ]
                }, 
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.", 
                    "$ref": "#/definitions/IdPermsType"
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "perms2": {
                    "description": "Permissions data for role based access.", 
                    "$ref": "#/definitions/PermType2"
                }
            }
        }, 
        "FloatingIpUpdate": {
            "properties": {
                "project_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "virtual_machine_interface_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "floating_ip_is_virtual_ip": {
                    "type": "boolean", 
                    "description": "This floating ip is used as virtual ip (VIP) in case of LBaaS."
                }, 
                "floating_ip_address_family": {
                    "type": "string", 
                    "description": "Ip address family of the floating ip, IpV4 or IpV6"
                }, 
                "floating_ip_fixed_ip_address": {
                    "type": "string", 
                    "description": "This floating is tracking given fixed ip of the interface. The given fixed ip is used in 1:1 NAT."
                }
            }
        }, 
        "VirtualNetworkRead": {
            "properties": {
                "virtual_network_properties": {
                    "description": "Virtual network miscelenious configurations.", 
                    "$ref": "#/definitions/VirtualNetworkType"
                }, 
                "ecmp_hashing_include_fields": {
                    "description": "ECMP hashing config at global level.", 
                    "$ref": "#/definitions/EcmpHashingIncludeFields"
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "virtual_network_network_id": {
                    "type": "number", 
                    "description": "System assigned unique 32 bit ID for every virtual network."
                }, 
                "qos_config_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }
                    ]
                }, 
                "network_policy_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }, 
                        {
                            "properties": {
                                "attr": {
                                    "$ref": "#/definitions/VirtualNetworkPolicyType"
                                }
                            }
                        }
                    ]
                }, 
                "router_external": {
                    "type": "boolean", 
                    "description": "When true, this virtual network is openstack router external network."
                }, 
                "import_route_target_list": {
                    "description": "List of route targets that are used as import for this virtual network.", 
                    "$ref": "#/definitions/RouteTargetList"
                }, 
                "route_table_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }
                    ]
                }, 
                "provider_properties": {
                    "description": "Virtual network is provider network. Specifies VLAN tag and physical network name.", 
                    "$ref": "#/definitions/ProviderDetails"
                }, 
                "perms2": {
                    "description": "Permissions data for role based access.", 
                    "$ref": "#/definitions/PermType2"
                }, 
                "route_target_list": {
                    "description": "List of route targets that are used as both import and export for this virtual network.", 
                    "$ref": "#/definitions/RouteTargetList"
                }, 
                "export_route_target_list": {
                    "description": "List of route targets that are used as export for this virtual network.", 
                    "$ref": "#/definitions/RouteTargetList"
                }, 
                "flood_unknown_unicast": {
                    "type": "boolean", 
                    "description": "When true, packets with unknown unicast MAC addres are flooded within the network. Default they are\ndropped."
                }, 
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.", 
                    "$ref": "#/definitions/IdPermsType"
                }, 
                "external_ipam": {
                    "type": "boolean", 
                    "description": "IP address assignment to VM is done statically, outside of (external to) Contrail Ipam. vCenter only\nfeature."
                }, 
                "network_ipam_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }, 
                        {
                            "properties": {
                                "attr": {
                                    "$ref": "#/definitions/VnSubnetsType"
                                }
                            }
                        }
                    ]
                }, 
                "multi_policy_service_chains_enabled": {
                    "type": "boolean", 
                    "description": "Allow multiple service chains within same two networks based on network policy.\nCurrent limitation is that both networks must reside within cluster, except when right most service\nis NAT."
                }, 
                "is_shared": {
                    "type": "boolean", 
                    "description": "When true, this virtual network is shared with all tenants."
                }
            }
        }, 
        "NetworkIpamRead": {
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "ipam_subnet_method": {
                    "type": "string", 
                    "description": "Subnet method configuration for ipam, user can configure user-defined, flat or auto."
                }, 
                "perms2": {
                    "description": "Permissions data for role based access.", 
                    "$ref": "#/definitions/PermType2"
                }, 
                "virtual_network_back_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }, 
                        {
                            "properties": {
                                "attr": {
                                    "$ref": "#/definitions/VnSubnetsType"
                                }
                            }
                        }
                    ]
                }, 
                "network_ipam_mgmt": {
                    "description": "Network IP Address Management configuration.", 
                    "$ref": "#/definitions/IpamType"
                }, 
                "ipam_subnets": {
                    "description": "List of subnets for this ipam.", 
                    "$ref": "#/definitions/IpamSubnets"
                }, 
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.", 
                    "$ref": "#/definitions/IdPermsType"
                }, 
                "virtual_DNS_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }
                    ]
                }
            }
        }, 
        "LogicalRouterRead": {
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "configured_route_target_list": {
                    "description": "List of route targets that represent this logical router, all virtual networks connected to this\nlogical router will have this as their route target list.", 
                    "$ref": "#/definitions/RouteTargetList"
                }, 
                "virtual_machine_interface_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }
                    ]
                }, 
                "virtual_network_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }
                    ]
                }, 
                "perms2": {
                    "description": "Permissions data for role based access.", 
                    "$ref": "#/definitions/PermType2"
                }, 
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.", 
                    "$ref": "#/definitions/IdPermsType"
                }, 
                "route_table_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }
                    ]
                }, 
                "route_target_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }
                    ]
                }, 
                "service_instance_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }
                    ]
                }
            }
        }, 
        "QosConfigUpdate": {
            "properties": {
                "mpls_exp_entries": {
                    "$ref": "#/definitions/QosIdForwardingClassPairs"
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "default_forwarding_class_id": {
                    "type": "number"
                }
            }
        }, 
        "LoadbalancerHealthmonitorUpdate": {
            "properties": {
                "loadbalancer_healthmonitor_properties": {
                    "$ref": "#/definitions/LoadbalancerHealthmonitorType"
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }
            }
        }, 
        "AnalyticsNodeRead": {
            "properties": {
                "analytics_node_ip_address": {
                    "type": "string", 
                    "description": "Ip address of the analytics node, set while provisioning."
                }, 
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.", 
                    "$ref": "#/definitions/IdPermsType"
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "perms2": {
                    "description": "Permissions data for role based access.", 
                    "$ref": "#/definitions/PermType2"
                }
            }
        }, 
        "LoadbalancerPoolType": {
            "properties": {
                "status": {
                    "type": "string"
                }, 
                "protocol": {
                    "type": "string"
                }, 
                "subnet_id": {
                    "type": "string"
                }, 
                "session_persistence": {
                    "type": "string"
                }, 
                "admin_state": {
                    "type": "boolean"
                }, 
                "persistence_cookie_name": {
                    "type": "string"
                }, 
                "status_description": {
                    "type": "string"
                }, 
                "loadbalancer_method": {
                    "type": "string"
                }
            }
        }, 
        "BgpRouterRead": {
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "bgp_router_parameters": {
                    "$ref": "#/definitions/BgpRouterParams"
                }, 
                "perms2": {
                    "description": "Permissions data for role based access.", 
                    "$ref": "#/definitions/PermType2"
                }, 
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.", 
                    "$ref": "#/definitions/IdPermsType"
                }, 
                "bgp_router_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }
                    ]
                }, 
                "bgp_router_back_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }, 
                        {
                            "properties": {
                                "attr": {
                                    "$ref": "#/definitions/BgpPeeringAttributes"
                                }
                            }
                        }
                    ]
                }
            }
        }, 
        "DomainRead": {
            "properties": {
                "perms2": {
                    "description": "Permissions data for role based access.", 
                    "$ref": "#/definitions/PermType2"
                }, 
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.", 
                    "$ref": "#/definitions/IdPermsType"
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "domain_limits": {
                    "description": "Domain level Qouta, not currently implemented", 
                    "$ref": "#/definitions/DomainLimitsType"
                }
            }
        }, 
        "FloatingIpPoolRead": {
            "properties": {
                "floating_ip_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }
                    ]
                }, 
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.", 
                    "$ref": "#/definitions/IdPermsType"
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "perms2": {
                    "description": "Permissions data for role based access.", 
                    "$ref": "#/definitions/PermType2"
                }, 
                "floating_ip_pool_prefixes": {
                    "description": "List of ip prefixes that restrict foating ip allocation from the corresponding virtual network.(Not\nyet implemented).", 
                    "$ref": "#/definitions/FloatingIpPoolType"
                }
            }
        }, 
        "BgpPeeringAttributes": {
            "properties": {
                "session": {
                    "$ref": "#/definitions/BgpSession"
                }
            }
        }, 
        "BgpRouterParams": {
            "properties": {
                "gateway_address": {
                    "type": "string"
                }, 
                "vendor": {
                    "type": "string"
                }, 
                "admin_down": {
                    "type": "boolean"
                }, 
                "ipv6_gateway_address": {
                    "type": "string"
                }, 
                "local_autonomous_system": {
                    "type": "integer"
                }, 
                "autonomous_system": {
                    "type": "integer"
                }, 
                "auth_data": {
                    "$ref": "#/definitions/AuthenticationData"
                }, 
                "address": {
                    "type": "string"
                }, 
                "source_port": {
                    "type": "integer"
                }, 
                "router_type": {
                    "type": "string"
                }, 
                "identifier": {
                    "type": "string"
                }, 
                "hold_time": {
                    "type": "integer"
                }, 
                "port": {
                    "type": "integer"
                }, 
                "address_families": {
                    "$ref": "#/definitions/AddressFamilies"
                }
            }
        }, 
        "ConfigNodeUpdate": {
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "config_node_ip_address": {
                    "type": "string", 
                    "description": "Ip address of the config node, set while provisioning."
                }
            }
        }, 
        "PolicyRuleType": {
            "required": [
                "direction", 
                "protocol", 
                "src_addresses", 
                "src_ports", 
                "dst_addresses", 
                "dst_ports", 
                "action_list", 
                "ethertype"
            ], 
            "properties": {
                "direction": {
                    "type": "string"
                }, 
                "protocol": {
                    "type": "string", 
                    "description": "Layer 4 protocol in ip packet"
                }, 
                "dst_addresses": {
                    "description": "Destination ip matching criteria", 
                    "$ref": "#/definitions/AddressType"
                }, 
                "action_list": {
                    "description": "Actions to be performed if packets match condition", 
                    "$ref": "#/definitions/ActionListType"
                }, 
                "rule_uuid": {
                    "type": "string", 
                    "description": "Rule UUID is identifier used in flow records to identify rule"
                }, 
                "dst_ports": {
                    "description": "Range of destination  port for layer 4 protocol", 
                    "$ref": "#/definitions/PortType"
                }, 
                "application": {
                    "type": "string", 
                    "description": "Optionally application can be specified instead of protcol and port. not\ncurrently implemented"
                }, 
                "ethertype": {
                    "type": "string"
                }, 
                "src_addresses": {
                    "description": "Source ip matching criteria", 
                    "$ref": "#/definitions/AddressType"
                }, 
                "rule_sequence": {
                    "description": "Deprecated, Will be removed", 
                    "$ref": "#/definitions/SequenceType"
                }, 
                "src_ports": {
                    "description": "Range of source port for layer 4 protocol", 
                    "$ref": "#/definitions/PortType"
                }
            }
        }, 
        "AddressType": {
            "properties": {
                "security_group": {
                    "type": "string", 
                    "description": "Any address that belongs to interface with this security-group"
                }, 
                "subnet": {
                    "description": "Any address that belongs to this subnet", 
                    "$ref": "#/definitions/SubnetType"
                }, 
                "network_policy": {
                    "type": "string", 
                    "description": "Any adddress that belongs to virtul network which has this policy attached"
                }, 
                "subnet_list": {
                    "description": "Any adddress that belongs to any one of subnet in this list", 
                    "$ref": "#/definitions/SubnetType"
                }, 
                "virtual_network": {
                    "type": "string", 
                    "description": "Any address that belongs to this virtul network"
                }
            }
        }, 
        "VirtualDnsRecordType": {
            "required": [
                "record_name", 
                "record_data"
            ], 
            "properties": {
                "record_name": {
                    "type": "string", 
                    "description": "DNS name to be resolved"
                }, 
                "record_class": {
                    "type": "string", 
                    "description": "DNS record class supported is IN"
                }, 
                "record_data": {
                    "type": "string", 
                    "description": "DNS record data is either ip address or string depending on type"
                }, 
                "record_type": {
                    "type": "string", 
                    "description": "DNS record type can be A, AAAA, CNAME, PTR, NS and MX"
                }, 
                "record_ttl_seconds": {
                    "type": "integer", 
                    "description": "Time To Live for this DNS record"
                }, 
                "record_mx_preference": {
                    "type": "integer"
                }
            }
        }, 
        "PolicyTermType": {
            "properties": {
                "term_action_list": {
                    "$ref": "#/definitions/TermActionListType"
                }, 
                "term_match_condition": {
                    "$ref": "#/definitions/TermMatchConditionType"
                }
            }
        }, 
        "ActionListType": {
            "required": [
                "simple_action"
            ], 
            "properties": {
                "gateway_name": {
                    "type": "string", 
                    "description": "For internal use only"
                }, 
                "log": {
                    "type": "boolean", 
                    "description": "Flow records for traffic matching this rule are sent at higher priority"
                }, 
                "alert": {
                    "type": "boolean", 
                    "description": "For internal use only"
                }, 
                "qos_action": {
                    "type": "string", 
                    "description": "FQN of Qos configuration object for QoS marking"
                }, 
                "assign_routing_instance": {
                    "type": "string", 
                    "description": "For internal use only"
                }, 
                "mirror_to": {
                    "description": "Mirror traffic matching this rule", 
                    "$ref": "#/definitions/MirrorActionType"
                }, 
                "simple_action": {
                    "type": "string", 
                    "description": "Simple allow(pass) or deny action for traffic matching this rule"
                }, 
                "apply_service": {
                    "type": "string", 
                    "description": "Ordered list of service instances in service chain applied to traffic matching\nthe rule"
                }
            }
        }, 
        "ForwardingClassCreate": {
            "required": [
                "fq_name", 
                "forwarding_class_id", 
                "forwarding_class_dscp", 
                "forwarding_class_vlan_priority", 
                "forwarding_class_mpls_exp", 
                "qos_queue_refs"
            ], 
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "qos_queue_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "forwarding_class_vlan_priority": {
                    "type": "number", 
                    "description": "802.1p value to be written on outgoing packet for this forwarding-class."
                }, 
                "forwarding_class_mpls_exp": {
                    "type": "number", 
                    "description": "MPLS exp value to be written on outgoing packet for this forwarding-class."
                }, 
                "forwarding_class_id": {
                    "type": "number", 
                    "description": "Unique ID for this forwarding class."
                }, 
                "forwarding_class_dscp": {
                    "type": "number", 
                    "description": "DSCP value to be written on outgoing packet for this forwarding-class."
                }, 
                "fq_name": {
                    "$ref": "#/definitions/FQName"
                }
            }
        }, 
        "BgpAsAServiceRead": {
            "properties": {
                "bgpaas_session_attributes": {
                    "description": "BGP peering session attributes.", 
                    "$ref": "#/definitions/BgpSessionAttributes"
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "bgpaas_suppress_route_advertisement": {
                    "type": "boolean", 
                    "description": "True when server should not advertise any routes to the client i.e. the client has static routes\n(typically a default) configured."
                }, 
                "bgpaas_ipv4_mapped_ipv6_nexthop": {
                    "type": "boolean", 
                    "description": "True when client bgp implementation expects to receive a ipv4-mapped ipv6 address (as opposed to\nregular ipv6 address) as the bgp nexthop for ipv6 routes."
                }, 
                "perms2": {
                    "description": "Permissions data for role based access.", 
                    "$ref": "#/definitions/PermType2"
                }, 
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.", 
                    "$ref": "#/definitions/IdPermsType"
                }, 
                "virtual_machine_interface_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }
                    ]
                }, 
                "bgpaas_ip_address": {
                    "type": "string", 
                    "description": "Ip address of the BGP peer."
                }, 
                "autonomous_system": {
                    "minimum": 1, 
                    "type": "number", 
                    "maximum": 65534, 
                    "description": "16 bit BGP Autonomous System number for the cluster."
                }, 
                "bgp_router_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }
                    ]
                }
            }
        }, 
        "NamespaceCreate": {
            "required": [
                "fq_name"
            ], 
            "properties": {
                "namespace_cidr": {
                    "description": "All networks in this namespace belong to this list of Prefixes. Not implemented.", 
                    "$ref": "#/definitions/SubnetType"
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "fq_name": {
                    "$ref": "#/definitions/FQName"
                }
            }
        }, 
        "DsaRuleCreate": {
            "required": [
                "fq_name", 
                "dsa_rule_entry"
            ], 
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "dsa_rule_entry": {
                    "description": "rule entry defining pubisher set and subscriber set.", 
                    "$ref": "#/definitions/DiscoveryServiceAssignmentType"
                }, 
                "fq_name": {
                    "$ref": "#/definitions/FQName"
                }
            }
        }, 
        "QosQueueRead": {
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "max_bandwidth": {
                    "type": "number", 
                    "description": "Maximum bandwidth for this queue."
                }, 
                "perms2": {
                    "description": "Permissions data for role based access.", 
                    "$ref": "#/definitions/PermType2"
                }, 
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.", 
                    "$ref": "#/definitions/IdPermsType"
                }, 
                "service_appliance_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }
                    ]
                }, 
                "min_bandwidth": {
                    "type": "number", 
                    "description": "Minimum bandwidth for this queue."
                }
            }
        }, 
        "GlobalSystemConfigUpdate": {
            "properties": {
                "user_defined_counter": {
                    "description": "counter name and patterns", 
                    "$ref": "#/definitions/UserDefinedCounterList"
                }, 
                "alarm_enable": {
                    "type": "boolean", 
                    "description": "Flag to enable/disable alarms configured under global-system-config. True, if not set."
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "graceful_restart_params": {
                    "description": "Graceful Restart parameters", 
                    "$ref": "#/definitions/GracefulRestartType"
                }, 
                "plugin_tuning": {
                    "description": "Various Orchestration system plugin(interface) parameters, like Openstack Neutron plugin.", 
                    "$ref": "#/definitions/PluginProperties"
                }, 
                "ibgp_auto_mesh": {
                    "type": "boolean", 
                    "description": "When true, system will automatically create BGP peering mesh with all control-nodes that have same\nBGP AS number as global AS number."
                }, 
                "bgp_router_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "ip_fabric_subnets": {
                    "description": "List of all subnets in which vrouter ip address exist. Used by Device manager to configure dynamic\nGRE tunnels on the SDN gateway.", 
                    "$ref": "#/definitions/SubnetListType"
                }, 
                "autonomous_system": {
                    "minimum": 1, 
                    "type": "number", 
                    "maximum": 65534, 
                    "description": "16 bit BGP Autonomous System number for the cluster."
                }
            }
        }, 
        "AclRuleType": {
            "required": [
                "match_condition", 
                "action_list"
            ], 
            "properties": {
                "rule_uuid": {
                    "type": "string", 
                    "description": "Rule UUID is identifier used in flow records to identify rule"
                }, 
                "match_condition": {
                    "description": "Match condition for packets", 
                    "$ref": "#/definitions/MatchConditionType"
                }, 
                "action_list": {
                    "description": "Actions to be performed if packets match condition", 
                    "$ref": "#/definitions/ActionListType"
                }
            }
        }, 
        "PhysicalInterfaceRead": {
            "properties": {
                "physical_interface_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }
                    ]
                }, 
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.", 
                    "$ref": "#/definitions/IdPermsType"
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "service_appliance_back_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }, 
                        {
                            "properties": {
                                "attr": {
                                    "$ref": "#/definitions/ServiceApplianceInterfaceType"
                                }
                            }
                        }
                    ]
                }, 
                "perms2": {
                    "description": "Permissions data for role based access.", 
                    "$ref": "#/definitions/PermType2"
                }
            }
        }, 
        "BgpRouterUpdate": {
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "bgp_router_parameters": {
                    "$ref": "#/definitions/BgpRouterParams"
                }, 
                "bgp_router_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }, 
                        {
                            "properties": {
                                "attr": {
                                    "$ref": "#/definitions/BgpPeeringAttributes"
                                }
                            }
                        }
                    ]
                }
            }
        }, 
        "RouteAggregateRead": {
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "aggregate_route_nexthop": {
                    "type": "string"
                }, 
                "routing_instance_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }
                    ]
                }, 
                "perms2": {
                    "description": "Permissions data for role based access.", 
                    "$ref": "#/definitions/PermType2"
                }, 
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.", 
                    "$ref": "#/definitions/IdPermsType"
                }, 
                "aggregate_route_entries": {
                    "$ref": "#/definitions/RouteListType"
                }, 
                "service_instance_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }, 
                        {
                            "properties": {
                                "attr": {
                                    "$ref": "#/definitions/ServiceInterfaceTag"
                                }
                            }
                        }
                    ]
                }
            }
        }, 
        "BgpAsAServiceUpdate": {
            "properties": {
                "bgpaas_session_attributes": {
                    "description": "BGP peering session attributes.", 
                    "$ref": "#/definitions/BgpSessionAttributes"
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "bgpaas_suppress_route_advertisement": {
                    "type": "boolean", 
                    "description": "True when server should not advertise any routes to the client i.e. the client has static routes\n(typically a default) configured."
                }, 
                "bgpaas_ipv4_mapped_ipv6_nexthop": {
                    "type": "boolean", 
                    "description": "True when client bgp implementation expects to receive a ipv4-mapped ipv6 address (as opposed to\nregular ipv6 address) as the bgp nexthop for ipv6 routes."
                }, 
                "virtual_machine_interface_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "bgp_router_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "bgpaas_ip_address": {
                    "type": "string", 
                    "description": "Ip address of the BGP peer."
                }, 
                "autonomous_system": {
                    "minimum": 1, 
                    "type": "number", 
                    "maximum": 65534, 
                    "description": "16 bit BGP Autonomous System number for the cluster."
                }
            }
        }, 
        "SecurityGroupCreate": {
            "required": [
                "fq_name", 
                "security_group_entries"
            ], 
            "properties": {
                "security_group_entries": {
                    "description": "Security group rule entries.", 
                    "$ref": "#/definitions/PolicyEntriesType"
                }, 
                "configured_security_group_id": {
                    "type": "number"
                }, 
                "fq_name": {
                    "$ref": "#/definitions/FQName"
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "security_group_id": {
                    "type": "string", 
                    "description": "Unique 32 bit ID automatically assigned to this security group [8M+1, 32G]."
                }
            }
        }, 
        "QosIdForwardingClassPair": {
            "properties": {
                "key": {
                    "type": "integer", 
                    "description": "QoS bit value (DSCP or Vlan priority or EXP bit value"
                }, 
                "forwarding_class_id": {
                    "type": "integer"
                }
            }
        }, 
        "ServiceHealthCheckRead": {
            "properties": {
                "service_instance_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }
                    ]
                }, 
                "service_health_check_properties": {
                    "description": "Service health check has following fields.", 
                    "$ref": "#/definitions/ServiceHealthCheckType"
                }, 
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.", 
                    "$ref": "#/definitions/IdPermsType"
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "perms2": {
                    "description": "Permissions data for role based access.", 
                    "$ref": "#/definitions/PermType2"
                }
            }
        }, 
        "GlobalQosConfigRead": {
            "properties": {
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.", 
                    "$ref": "#/definitions/IdPermsType"
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "perms2": {
                    "description": "Permissions data for role based access.", 
                    "$ref": "#/definitions/PermType2"
                }
            }
        }, 
        "PortTupleCreate": {
            "required": [
                "fq_name"
            ], 
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "fq_name": {
                    "$ref": "#/definitions/FQName"
                }
            }
        }, 
        "PhysicalInterfaceUpdate": {
            "properties": {
                "physical_interface_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }
            }
        }, 
        "VirtualDnsCreate": {
            "required": [
                "fq_name", 
                "virtual_DNS_data"
            ], 
            "properties": {
                "virtual_DNS_data": {
                    "description": "Virtua DNS data has configuration for virtual DNS like domain, dynamic records etc.", 
                    "$ref": "#/definitions/VirtualDnsType"
                }, 
                "fq_name": {
                    "$ref": "#/definitions/FQName"
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }
            }
        }, 
        "ServiceApplianceSetCreate": {
            "required": [
                "fq_name"
            ], 
            "properties": {
                "service_appliance_set_properties": {
                    "description": "List of Key:Value pairs that are used by the provider driver and opaque to system.", 
                    "$ref": "#/definitions/KeyValuePairs"
                }, 
                "service_appliance_ha_mode": {
                    "type": "string", 
                    "description": "High availability mode for the service appliance set, active-active or active-backup."
                }, 
                "fq_name": {
                    "$ref": "#/definitions/FQName"
                }, 
                "service_appliance_driver": {
                    "type": "string", 
                    "description": "Name of the provider driver for this service appliance set."
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }
            }
        }, 
        "InstanceIpRead": {
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "service_health_check_ip": {
                    "type": "boolean", 
                    "description": "This instance ip is used as service health check source ip"
                }, 
                "secondary_ip_tracking_ip": {
                    "description": "When this instance ip is secondary ip, it can track activeness of another ip.", 
                    "$ref": "#/definitions/SubnetType"
                }, 
                "instance_ip_address": {
                    "type": "string", 
                    "description": "Ip address value for instance ip."
                }, 
                "perms2": {
                    "description": "Permissions data for role based access.", 
                    "$ref": "#/definitions/PermType2"
                }, 
                "instance_ip_mode": {
                    "type": "string", 
                    "description": "Ip address HA mode in case this instance ip is used in more than one interface, active-Active or\nactive-Standby."
                }, 
                "subnet_uuid": {
                    "type": "string", 
                    "description": "This instance ip was allocated from this Subnet(UUID)."
                }, 
                "service_instance_back_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }, 
                        {
                            "properties": {
                                "attr": {
                                    "$ref": "#/definitions/ServiceInterfaceTag"
                                }
                            }
                        }
                    ]
                }, 
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.", 
                    "$ref": "#/definitions/IdPermsType"
                }, 
                "instance_ip_family": {
                    "type": "string", 
                    "description": "Ip address family for instance ip, IPv4(v4) or IPv6(v6)."
                }, 
                "virtual_machine_interface_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }
                    ]
                }, 
                "service_instance_ip": {
                    "type": "boolean", 
                    "description": "This instance ip is used as service chain next hop"
                }, 
                "physical_router_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }
                    ]
                }, 
                "virtual_network_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }
                    ]
                }, 
                "instance_ip_secondary": {
                    "type": "boolean", 
                    "description": "This instance ip is secondary ip of the interface."
                }
            }
        }, 
        "AliasIpCreate": {
            "required": [
                "fq_name", 
                "alias_ip_address", 
                "project_refs"
            ], 
            "properties": {
                "project_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "fq_name": {
                    "$ref": "#/definitions/FQName"
                }, 
                "alias_ip_address": {
                    "type": "string", 
                    "description": "Alias ip address."
                }, 
                "alias_ip_address_family": {
                    "type": "string", 
                    "description": "Ip address family of the alias ip, IpV4 or IpV6"
                }, 
                "virtual_machine_interface_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }
            }
        }, 
        "ForwardingClassRead": {
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "qos_queue_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }
                    ]
                }, 
                "forwarding_class_vlan_priority": {
                    "type": "number", 
                    "description": "802.1p value to be written on outgoing packet for this forwarding-class."
                }, 
                "perms2": {
                    "description": "Permissions data for role based access.", 
                    "$ref": "#/definitions/PermType2"
                }, 
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.", 
                    "$ref": "#/definitions/IdPermsType"
                }, 
                "forwarding_class_mpls_exp": {
                    "type": "number", 
                    "description": "MPLS exp value to be written on outgoing packet for this forwarding-class."
                }, 
                "forwarding_class_id": {
                    "type": "number", 
                    "description": "Unique ID for this forwarding class."
                }, 
                "forwarding_class_dscp": {
                    "type": "number", 
                    "description": "DSCP value to be written on outgoing packet for this forwarding-class."
                }
            }
        }, 
        "RouteListType": {
            "properties": {
                "route": {
                    "type": "string"
                }
            }
        }, 
        "Error": {
            "required": [
                "message"
            ], 
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        }, 
        "ConfigRootRead": {
            "properties": {
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.", 
                    "$ref": "#/definitions/IdPermsType"
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "perms2": {
                    "description": "Permissions data for role based access.", 
                    "$ref": "#/definitions/PermType2"
                }
            }
        }, 
        "FatFlowProtocols": {
            "properties": {
                "fat_flow_protocol": {
                    "$ref": "#/definitions/ProtocolType"
                }
            }
        }, 
        "SequenceType": {
            "required": [
                "major", 
                "minor"
            ], 
            "properties": {
                "major": {
                    "type": "integer"
                }, 
                "minor": {
                    "type": "integer"
                }
            }
        }, 
        "SecurityGroupRead": {
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "configured_security_group_id": {
                    "type": "number"
                }, 
                "perms2": {
                    "description": "Permissions data for role based access.", 
                    "$ref": "#/definitions/PermType2"
                }, 
                "security_group_id": {
                    "type": "string", 
                    "description": "Unique 32 bit ID automatically assigned to this security group [8M+1, 32G]."
                }, 
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.", 
                    "$ref": "#/definitions/IdPermsType"
                }, 
                "access_control_list_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }
                    ]
                }, 
                "security_group_entries": {
                    "description": "Security group rule entries.", 
                    "$ref": "#/definitions/PolicyEntriesType"
                }
            }
        }, 
        "GracefulRestartType": {
            "properties": {
                "end_of_rib_receive_time": {
                    "type": "integer"
                }, 
                "long_lived_graceful_restart_time": {
                    "type": "integer"
                }, 
                "graceful_restart_time": {
                    "type": "integer"
                }
            }
        }, 
        "NamespaceUpdate": {
            "properties": {
                "namespace_cidr": {
                    "description": "All networks in this namespace belong to this list of Prefixes. Not implemented.", 
                    "$ref": "#/definitions/SubnetType"
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }
            }
        }, 
        "SubnetUpdate": {
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "virtual_machine_interface_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }
            }
        }, 
        "PermType": {
            "required": [
                "owner_access", 
                "group_access", 
                "other_access"
            ], 
            "properties": {
                "owner": {
                    "type": "string"
                }, 
                "owner_access": {
                    "type": "integer", 
                    "description": "Three bits representing rwx.\n   r=read permission,\n   w=write permission,\n   x=reference permission"
                }, 
                "other_access": {
                    "type": "integer", 
                    "description": "Three bits representing rwx.\n   r=read permission,\n   w=write permission,\n   x=reference permission"
                }, 
                "group": {
                    "type": "string"
                }, 
                "group_access": {
                    "type": "integer", 
                    "description": "Three bits representing rwx.\n   r=read permission,\n   w=write permission,\n   x=reference permission"
                }
            }
        }, 
        "ServiceInstanceType": {
            "required": [
                "interface_list"
            ], 
            "properties": {
                "right_virtual_network": {
                    "type": "string", 
                    "description": "Deprecated"
                }, 
                "right_ip_address": {
                    "type": "string", 
                    "description": "Deprecated"
                }, 
                "availability_zone": {
                    "type": "string", 
                    "description": "Availability zone used to spawn VM(s) for this service instance, used in version\n1 (V1) only"
                }, 
                "management_virtual_network": {
                    "type": "string", 
                    "description": "Deprecated"
                }, 
                "scale_out": {
                    "description": "Number of virtual machines in this service instance, used in version 1 (V1) only", 
                    "$ref": "#/definitions/ServiceScaleOutType"
                }, 
                "ha_mode": {
                    "type": "string", 
                    "description": "When scale-out is greater than one, decides if active-active or active-backup,\nused in version 1 (V1) only"
                }, 
                "virtual_router_id": {
                    "type": "string", 
                    "description": "UUID of a virtual-router on which this service instance need to spwan. Used to\nspawn services on CPE device when Nova is not present"
                }, 
                "interface_list": {
                    "description": "List of service instance interface properties. Ordered list as per service\ntemplate", 
                    "$ref": "#/definitions/ServiceInstanceInterfaceType"
                }, 
                "left_ip_address": {
                    "type": "string", 
                    "description": "Deprecated"
                }, 
                "left_virtual_network": {
                    "type": "string", 
                    "description": "Deprecated"
                }, 
                "auto_policy": {
                    "type": "boolean", 
                    "description": "Set when system creates internal service chains, example SNAT with router\nexternal flag in logical router"
                }
            }
        }, 
        "AuthenticationData": {
            "properties": {
                "key_type": {
                    "type": "string"
                }, 
                "key_items": {
                    "$ref": "#/definitions/AuthenticationKeyItem"
                }
            }
        }, 
        "RoutingInstanceUpdate": {
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "routing_instance_has_pnf": {
                    "type": "boolean"
                }, 
                "routing_instance_is_default": {
                    "type": "boolean"
                }, 
                "service_chain_information": {
                    "$ref": "#/definitions/ServiceChainInfo"
                }, 
                "ipv6_service_chain_information": {
                    "$ref": "#/definitions/ServiceChainInfo"
                }, 
                "static_route_entries": {
                    "$ref": "#/definitions/StaticRouteEntriesType"
                }, 
                "route_target_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }, 
                        {
                            "properties": {
                                "attr": {
                                    "$ref": "#/definitions/InstanceTargetType"
                                }
                            }
                        }
                    ]
                }, 
                "routing_instance_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }, 
                        {
                            "properties": {
                                "attr": {
                                    "$ref": "#/definitions/ConnectionType"
                                }
                            }
                        }
                    ]
                }, 
                "default_ce_protocol": {
                    "$ref": "#/definitions/DefaultProtocolType"
                }
            }
        }, 
        "RouteTableRead": {
            "properties": {
                "routes": {
                    "description": "Routes in the route table are configured in following way.", 
                    "$ref": "#/definitions/RouteTableType"
                }, 
                "port_tuple_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }
                    ]
                }, 
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.", 
                    "$ref": "#/definitions/IdPermsType"
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "perms2": {
                    "description": "Permissions data for role based access.", 
                    "$ref": "#/definitions/PermType2"
                }
            }
        }, 
        "ProtocolType": {
            "properties": {
                "protocol": {
                    "type": "string"
                }, 
                "port": {
                    "type": "integer"
                }
            }
        }, 
        "NetworkPolicyCreate": {
            "required": [
                "fq_name", 
                "network_policy_entries"
            ], 
            "properties": {
                "network_policy_entries": {
                    "description": "Network policy rule entries.", 
                    "$ref": "#/definitions/PolicyEntriesType"
                }, 
                "fq_name": {
                    "$ref": "#/definitions/FQName"
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }
            }
        }, 
        "ApiAccessListCreate": {
            "required": [
                "fq_name", 
                "api_access_list_entries"
            ], 
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "api_access_list_entries": {
                    "description": "List of rules e.g network.* => admin:CRUD (admin can perform all ops on networks).", 
                    "$ref": "#/definitions/RbacRuleEntriesType"
                }, 
                "fq_name": {
                    "$ref": "#/definitions/FQName"
                }
            }
        }, 
        "PluginProperties": {
            "properties": {
                "plugin_property": {
                    "description": "List of plugin specific properties (property, value)", 
                    "$ref": "#/definitions/PluginProperty"
                }
            }
        }, 
        "ServiceTemplateType": {
            "required": [
                "service_mode", 
                "service_type", 
                "interface_type"
            ], 
            "properties": {
                "availability_zone_enable": {
                    "type": "boolean", 
                    "description": "Enable availability zone for verion 1 service instances"
                }, 
                "instance_data": {
                    "type": "string", 
                    "description": "Opaque string (typically in json format) used to spawn a vrouter-instance."
                }, 
                "ordered_interfaces": {
                    "type": "boolean", 
                    "description": "Deprecated"
                }, 
                "service_virtualization_type": {
                    "type": "string", 
                    "description": "Service virtualization type decides how individual service instances are\ninstatiated"
                }, 
                "interface_type": {
                    "description": "List of interfaces which decided number of interfaces and type", 
                    "$ref": "#/definitions/ServiceTemplateInterfaceType"
                }, 
                "image_name": {
                    "type": "string", 
                    "description": "Glance image name for the service virtual machine, Version 1 only"
                }, 
                "service_mode": {
                    "type": "string", 
                    "description": "Service instance mode decides how packets are forwarded across the service"
                }, 
                "version": {
                    "type": "integer", 
                    "description": "Version of service template.\n    1: Service virtual machines and interfaces are  automatically launched,\nmonitored and deleted.\n    2: User creates all objects( virtual machines and interfaces) and manages\nthe life cycle.\n       Useful when virtual machines and interfaces are managed via heat template"
                }, 
                "service_type": {
                    "type": "string", 
                    "description": "Service instance mode decides how routing happens across the service"
                }, 
                "flavor": {
                    "type": "string", 
                    "description": "Nova flavor used for service virtual machines, Version 1 only"
                }, 
                "service_scaling": {
                    "type": "boolean", 
                    "description": "Enable scaling of service virtual machines, Version 1 only"
                }, 
                "vrouter_instance_type": {
                    "type": "string", 
                    "description": "Mechanism used to spawn service instance, when vrouter is spawning\ninstances.Allowed values libvirt-qemu, docker or netns"
                }
            }
        }, 
        "RoutingPolicyType": {
            "properties": {
                "sequence": {
                    "type": "string"
                }
            }
        }, 
        "LoadbalancerType": {
            "properties": {
                "status": {
                    "type": "string"
                }, 
                "provisioning_status": {
                    "type": "string"
                }, 
                "admin_state": {
                    "type": "boolean"
                }, 
                "vip_address": {
                    "type": "string", 
                    "description": "String of standard notation of ipv4 or ipv6 address"
                }, 
                "vip_subnet_id": {
                    "type": "string"
                }, 
                "operating_status": {
                    "type": "string"
                }
            }
        }, 
        "Href": {
            "required": [
                "href"
            ], 
            "properties": {
                "href": {
                    "type": "string", 
                    "format": "url"
                }
            }
        }, 
        "GlobalQosConfigUpdate": {
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }
            }
        }, 
        "SubnetType": {
            "properties": {
                "ip_prefix": {
                    "type": "string"
                }, 
                "ip_prefix_len": {
                    "type": "integer"
                }
            }
        }, 
        "BgpSessionAttributes": {
            "properties": {
                "auth_data": {
                    "$ref": "#/definitions/AuthenticationData"
                }, 
                "admin_down": {
                    "type": "boolean"
                }, 
                "as_override": {
                    "type": "boolean"
                }, 
                "bgp_router": {
                    "type": "string"
                }, 
                "passive": {
                    "type": "boolean"
                }, 
                "family_attributes": {
                    "$ref": "#/definitions/BgpFamilyAttributes"
                }, 
                "hold_time": {
                    "type": "integer"
                }, 
                "loop_count": {
                    "type": "integer"
                }, 
                "address_families": {
                    "$ref": "#/definitions/AddressFamilies"
                }
            }
        }, 
        "AlarmOrList": {
            "properties": {
                "or_list": {
                    "$ref": "#/definitions/AlarmAndList"
                }
            }
        }, 
        "AliasIpPoolCreate": {
            "required": [
                "fq_name"
            ], 
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "fq_name": {
                    "$ref": "#/definitions/FQName"
                }
            }
        }, 
        "QuotaType": {
            "properties": {
                "virtual_router": {
                    "type": "integer", 
                    "description": "Maximum number of logical routers"
                }, 
                "network_policy": {
                    "type": "integer", 
                    "description": "Maximum number of network policies"
                }, 
                "loadbalancer_pool": {
                    "type": "integer", 
                    "description": "Maximum number of loadbalancer pools"
                }, 
                "subnet": {
                    "type": "integer", 
                    "description": "Maximum number of subnets"
                }, 
                "network_ipam": {
                    "type": "integer", 
                    "description": "Maximum number of network IPAMs"
                }, 
                "virtual_DNS_record": {
                    "type": "integer", 
                    "description": "Maximum number of virtual DNS records"
                }, 
                "logical_router": {
                    "type": "integer", 
                    "description": "Maximum number of logical routers"
                }, 
                "security_group_rule": {
                    "type": "integer", 
                    "description": "Maximum number of security group rules"
                }, 
                "virtual_DNS": {
                    "type": "integer", 
                    "description": "Maximum number of virtual DNS servers"
                }, 
                "service_instance": {
                    "type": "integer", 
                    "description": "Maximum number of service instances"
                }, 
                "service_template": {
                    "type": "integer", 
                    "description": "Maximum number of service templates"
                }, 
                "bgp_router": {
                    "type": "integer", 
                    "description": "Maximum number of bgp routers"
                }, 
                "floating_ip": {
                    "type": "integer", 
                    "description": "Maximum number of floating ips"
                }, 
                "floating_ip_pool": {
                    "type": "integer", 
                    "description": "Maximum number of floating ip pools"
                }, 
                "loadbalancer_member": {
                    "type": "integer", 
                    "description": "Maximum number of loadbalancer member"
                }, 
                "access_control_list": {
                    "type": "integer", 
                    "description": "Maximum number of access control lists"
                }, 
                "virtual_machine_interface": {
                    "type": "integer", 
                    "description": "Maximum number of virtual machine interfaces"
                }, 
                "instance_ip": {
                    "type": "integer", 
                    "description": "Maximum number of instance ips"
                }, 
                "global_vrouter_config": {
                    "type": "integer", 
                    "description": "Maximum number of global vrouter configs"
                }, 
                "loadbalancer_healthmonitor": {
                    "type": "integer", 
                    "description": "Maximum number of loadbalancer health monitors"
                }, 
                "virtual_ip": {
                    "type": "integer", 
                    "description": "Maximum number of virtual ips"
                }, 
                "defaults": {
                    "type": "integer", 
                    "description": "Need to clarify"
                }, 
                "security_group": {
                    "type": "integer", 
                    "description": "Maximum number of security groups"
                }, 
                "virtual_network": {
                    "type": "integer", 
                    "description": "Maximum number of virtual networks"
                }
            }
        }, 
        "RouteTableType": {
            "properties": {
                "route": {
                    "description": "List of ip routes with following fields.", 
                    "$ref": "#/definitions/RouteType"
                }
            }
        }, 
        "LoadbalancerMemberType": {
            "properties": {
                "status": {
                    "type": "string"
                }, 
                "status_description": {
                    "type": "string"
                }, 
                "weight": {
                    "type": "integer"
                }, 
                "admin_state": {
                    "type": "boolean"
                }, 
                "address": {
                    "type": "string", 
                    "description": "String of standard notation of ipv4 or ipv6 address"
                }, 
                "protocol_port": {
                    "type": "integer"
                }
            }
        }, 
        "JunosServicePorts": {
            "properties": {
                "service_port": {
                    "type": "string"
                }
            }
        }, 
        "RouteTableCreate": {
            "required": [
                "fq_name", 
                "routes"
            ], 
            "properties": {
                "routes": {
                    "description": "Routes in the route table are configured in following way.", 
                    "$ref": "#/definitions/RouteTableType"
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "fq_name": {
                    "$ref": "#/definitions/FQName"
                }
            }
        }, 
        "ServiceApplianceInterfaceType": {
            "properties": {
                "interface_type": {
                    "type": "string"
                }
            }
        }, 
        "ServiceScaleOutType": {
            "required": [
                "max_instances", 
                "auto_scale"
            ], 
            "properties": {
                "auto_scale": {
                    "type": "boolean", 
                    "description": "Automatically change the number of virtual machines. Not implemented"
                }, 
                "max_instances": {
                    "type": "integer", 
                    "description": "Maximum number of scale out factor(virtual machines). can be changed dynamically"
                }
            }
        }, 
        "Uuid": {
            "required": [
                "uuid"
            ], 
            "properties": {
                "uuid": {
                    "type": "string", 
                    "format": "uuid"
                }
            }
        }, 
        "NetworkIpamCreate": {
            "required": [
                "fq_name"
            ], 
            "properties": {
                "fq_name": {
                    "$ref": "#/definitions/FQName"
                }, 
                "ipam_subnet_method": {
                    "type": "string", 
                    "description": "Subnet method configuration for ipam, user can configure user-defined, flat or auto."
                }, 
                "network_ipam_mgmt": {
                    "description": "Network IP Address Management configuration.", 
                    "$ref": "#/definitions/IpamType"
                }, 
                "ipam_subnets": {
                    "description": "List of subnets for this ipam.", 
                    "$ref": "#/definitions/IpamSubnets"
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "virtual_DNS_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }
            }
        }, 
        "RoutingPolicyCreate": {
            "required": [
                "fq_name"
            ], 
            "properties": {
                "routing_policy_entries": {
                    "$ref": "#/definitions/PolicyStatementType"
                }, 
                "routing_instance_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }, 
                        {
                            "properties": {
                                "attr": {
                                    "$ref": "#/definitions/RoutingPolicyType"
                                }
                            }
                        }
                    ]
                }, 
                "service_instance_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }, 
                        {
                            "properties": {
                                "attr": {
                                    "$ref": "#/definitions/RoutingPolicyServiceInstanceType"
                                }
                            }
                        }
                    ]
                }, 
                "fq_name": {
                    "$ref": "#/definitions/FQName"
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }
            }
        }, 
        "NamespaceRead": {
            "properties": {
                "namespace_cidr": {
                    "description": "All networks in this namespace belong to this list of Prefixes. Not implemented.", 
                    "$ref": "#/definitions/SubnetType"
                }, 
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.", 
                    "$ref": "#/definitions/IdPermsType"
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "project_back_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }, 
                        {
                            "properties": {
                                "attr": {
                                    "$ref": "#/definitions/SubnetType"
                                }
                            }
                        }
                    ]
                }, 
                "perms2": {
                    "description": "Permissions data for role based access.", 
                    "$ref": "#/definitions/PermType2"
                }
            }
        }, 
        "LogicalInterfaceUpdate": {
            "properties": {
                "logical_interface_vlan_tag": {
                    "type": "number", 
                    "description": "VLAN tag (.1Q) classifier for this logical interface."
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "virtual_machine_interface_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "logical_interface_type": {
                    "type": "string", 
                    "description": "Logical interface type can be L2 or L3.\n L2 - only L2 service is provided, MAC learning is supported.\n L3 - only L3 service is supported and MAC learning is not supported."
                }
            }
        }, 
        "AllowedAddressPair": {
            "properties": {
                "ip": {
                    "$ref": "#/definitions/SubnetType"
                }, 
                "mac": {
                    "type": "string"
                }, 
                "address_mode": {
                    "type": "string", 
                    "description": "Address-mode active-backup is used for VRRP address.\nAddress-mode active-active is used for ECMP."
                }
            }
        }, 
        "AccessControlListUpdate": {
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "access_control_list_entries": {
                    "description": "Automatically generated by system based on security groups or network policies.", 
                    "$ref": "#/definitions/AclEntriesType"
                }
            }
        }, 
        "To": {
            "properties": {
                "to": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array"
                }
            }
        }, 
        "IdPermsType": {
            "required": [
                "uuid", 
                "enable"
            ], 
            "properties": {
                "enable": {
                    "type": "boolean", 
                    "description": "Administratively Enable/Disable this object"
                }, 
                "description": {
                    "type": "string", 
                    "description": "User provided text"
                }, 
                "created": {
                    "type": "string", 
                    "description": "Time when this object was created", 
                    "format": "date-time"
                }, 
                "creator": {
                    "type": "string", 
                    "description": "Id of tenant who created this object"
                }, 
                "user_visible": {
                    "type": "boolean", 
                    "description": "System created internal objects will have this flag set and will not be visible"
                }, 
                "last_modified": {
                    "type": "string", 
                    "description": "Time when this object was created", 
                    "format": "date-time"
                }, 
                "permissions": {
                    "description": "No longer used, will be removed", 
                    "$ref": "#/definitions/PermType"
                }, 
                "uuid": {
                    "description": "UUID of the object, system automatically allocates one if not provided", 
                    "$ref": "#/definitions/UuidType"
                }
            }
        }, 
        "RoutingInstanceCreate": {
            "required": [
                "fq_name"
            ], 
            "properties": {
                "fq_name": {
                    "$ref": "#/definitions/FQName"
                }, 
                "routing_instance_has_pnf": {
                    "type": "boolean"
                }, 
                "routing_instance_is_default": {
                    "type": "boolean"
                }, 
                "service_chain_information": {
                    "$ref": "#/definitions/ServiceChainInfo"
                }, 
                "ipv6_service_chain_information": {
                    "$ref": "#/definitions/ServiceChainInfo"
                }, 
                "static_route_entries": {
                    "$ref": "#/definitions/StaticRouteEntriesType"
                }, 
                "route_target_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }, 
                        {
                            "properties": {
                                "attr": {
                                    "$ref": "#/definitions/InstanceTargetType"
                                }
                            }
                        }
                    ]
                }, 
                "routing_instance_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }, 
                        {
                            "properties": {
                                "attr": {
                                    "$ref": "#/definitions/ConnectionType"
                                }
                            }
                        }
                    ]
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "default_ce_protocol": {
                    "$ref": "#/definitions/DefaultProtocolType"
                }
            }
        }, 
        "FlowAgingTimeoutList": {
            "properties": {
                "flow_aging_timeout": {
                    "description": "List of (ip protocol, port number, timeout in seconds)", 
                    "$ref": "#/definitions/FlowAgingTimeout"
                }
            }
        }, 
        "DhcpOptionType": {
            "required": [
                "dhcp_option_name", 
                "dhcp_option_value", 
                "dhcp_option_value_bytes"
            ], 
            "properties": {
                "dhcp_option_value": {
                    "type": "string", 
                    "description": "Encoded DHCP option value (decimal)"
                }, 
                "dhcp_option_value_bytes": {
                    "type": "string", 
                    "description": "Value of the DHCP option to be copied byte by byte"
                }, 
                "dhcp_option_name": {
                    "type": "string", 
                    "description": "Name of the DHCP option"
                }
            }
        }, 
        "InterfaceMirrorType": {
            "required": [
                "traffic_direction", 
                "mirror_to"
            ], 
            "properties": {
                "traffic_direction": {
                    "type": "string", 
                    "description": "Specifies direction of traffic to mirror, Ingress, Egress or both"
                }, 
                "mirror_to": {
                    "description": "Mirror destination configuration", 
                    "$ref": "#/definitions/MirrorActionType"
                }
            }
        }, 
        "ActionCommunityType": {
            "properties": {
                "add": {
                    "$ref": "#/definitions/CommunityListType"
                }, 
                "set": {
                    "$ref": "#/definitions/CommunityListType"
                }, 
                "remove": {
                    "$ref": "#/definitions/CommunityListType"
                }
            }
        }, 
        "VirtualDnsRecordCreate": {
            "required": [
                "fq_name", 
                "virtual_DNS_record_data"
            ], 
            "properties": {
                "virtual_DNS_record_data": {
                    "description": "DNS record data has configuration like type, name, ip address, loadbalancing etc.", 
                    "$ref": "#/definitions/VirtualDnsRecordType"
                }, 
                "fq_name": {
                    "$ref": "#/definitions/FQName"
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }
            }
        }, 
        "ServiceTemplateInterfaceType": {
            "required": [
                "service_interface_type"
            ], 
            "properties": {
                "static_route_enable": {
                    "type": "boolean", 
                    "description": "Static routes configured required on this interface of service instance (Only\nV1)"
                }, 
                "shared_ip": {
                    "type": "boolean", 
                    "description": "Shared ip is required on this interface when service instance is scaled out\n(Only V1)"
                }, 
                "service_interface_type": {
                    "type": "string", 
                    "description": "Type of service interface supported by this template left, right or other."
                }
            }
        }, 
        "BgpSession": {
            "properties": {
                "attributes": {
                    "$ref": "#/definitions/BgpSessionAttributes"
                }, 
                "uuid": {
                    "type": "string"
                }
            }
        }, 
        "LoadbalancerUpdate": {
            "properties": {
                "loadbalancer_properties": {
                    "$ref": "#/definitions/LoadbalancerType"
                }, 
                "loadbalancer_provider": {
                    "type": "string"
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "virtual_machine_interface_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "service_instance_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }
            }
        }, 
        "ShareType": {
            "required": [
                "tenant", 
                "tenant_access"
            ], 
            "properties": {
                "tenant_access": {
                    "type": "integer", 
                    "description": "Allowed permissions in sharing"
                }, 
                "tenant": {
                    "type": "string", 
                    "description": "Name of tenant with whom the object is shared"
                }
            }
        }, 
        "AlarmCreate": {
            "required": [
                "fq_name", 
                "uve_keys", 
                "alarm_severity"
            ], 
            "properties": {
                "alarm_rules": {
                    "description": "Rules based on the UVE attributes specified as OR-of-ANDs of AlarmExpression template. Example:\n\"alarm_rules\": {\"or_list\": [{\"and_list\": [{AlarmExpression1}, {AlarmExpression2}, ...]},\n{\"and_list\": [{AlarmExpression3}, {AlarmExpression4}, ...]}]}", 
                    "$ref": "#/definitions/AlarmOrList"
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "fq_name": {
                    "$ref": "#/definitions/FQName"
                }, 
                "uve_keys": {
                    "type": "string", 
                    "description": "List of UVE tables or UVE objects where this alarm config should be applied. For example, rules\nbased on NodeStatus UVE can be applied to multiple object types such as analytics-node, config-node,\ncontrol-node, etc., Alarm config may also be applied to specific objects that can be specified as\n<uve-table-name>.<uve-name>"
                }, 
                "alarm_severity": {
                    "minimum": 0, 
                    "type": "number", 
                    "maximum": 7, 
                    "description": "Severity level for the alarm."
                }
            }
        }, 
        "DiscoveryServiceAssignmentType": {
            "required": [
                "publisher", 
                "subscriber"
            ], 
            "properties": {
                "subscriber": {
                    "description": "subscriber set", 
                    "$ref": "#/definitions/DiscoveryPubSubEndPointType"
                }, 
                "publisher": {
                    "description": "Publisher set", 
                    "$ref": "#/definitions/DiscoveryPubSubEndPointType"
                }
            }
        }, 
        "SecurityGroupUpdate": {
            "properties": {
                "security_group_entries": {
                    "description": "Security group rule entries.", 
                    "$ref": "#/definitions/PolicyEntriesType"
                }, 
                "configured_security_group_id": {
                    "type": "number"
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }
            }
        }, 
        "VirtualDnsRead": {
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.", 
                    "$ref": "#/definitions/IdPermsType"
                }, 
                "virtual_DNS_data": {
                    "description": "Virtua DNS data has configuration for virtual DNS like domain, dynamic records etc.", 
                    "$ref": "#/definitions/VirtualDnsType"
                }, 
                "perms2": {
                    "description": "Permissions data for role based access.", 
                    "$ref": "#/definitions/PermType2"
                }, 
                "virtual_DNS_record_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }
                    ]
                }
            }
        }, 
        "ServiceApplianceSetRead": {
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "service_appliance_driver": {
                    "type": "string", 
                    "description": "Name of the provider driver for this service appliance set."
                }, 
                "perms2": {
                    "description": "Permissions data for role based access.", 
                    "$ref": "#/definitions/PermType2"
                }, 
                "service_appliance_set_properties": {
                    "description": "List of Key:Value pairs that are used by the provider driver and opaque to system.", 
                    "$ref": "#/definitions/KeyValuePairs"
                }, 
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.", 
                    "$ref": "#/definitions/IdPermsType"
                }, 
                "service_appliance_ha_mode": {
                    "type": "string", 
                    "description": "High availability mode for the service appliance set, active-active or active-backup."
                }, 
                "service_appliance_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }
                    ]
                }
            }
        }, 
        "EcmpHashingIncludeFields": {
            "properties": {
                "destination_ip": {
                    "type": "boolean", 
                    "description": "When false, do not use destination ip in the ECMP hash calculation"
                }, 
                "ip_protocol": {
                    "type": "boolean", 
                    "description": "When false, do not use ip protocol in the ECMP hash calculation"
                }, 
                "source_ip": {
                    "type": "boolean", 
                    "description": "When false, do not use source ip in the ECMP hash calculation"
                }, 
                "hashing_configured": {
                    "type": "boolean", 
                    "description": "When True, Packet header fields used in calculating ECMP hash is decided by\nfollowing flags"
                }, 
                "source_port": {
                    "type": "boolean", 
                    "description": "When false, do not use source port in the ECMP hash calculation"
                }, 
                "destination_port": {
                    "type": "boolean", 
                    "description": "When false, do not use destination port in the ECMP hash calculation"
                }
            }
        }, 
        "ServiceTemplateRead": {
            "properties": {
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.", 
                    "$ref": "#/definitions/IdPermsType"
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "service_template_properties": {
                    "description": "Service template confurigation parameters.", 
                    "$ref": "#/definitions/ServiceTemplateType"
                }, 
                "perms2": {
                    "description": "Permissions data for role based access.", 
                    "$ref": "#/definitions/PermType2"
                }, 
                "service_appliance_set_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }
                    ]
                }
            }
        }, 
        "LogicalInterfaceRead": {
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "logical_interface_vlan_tag": {
                    "type": "number", 
                    "description": "VLAN tag (.1Q) classifier for this logical interface."
                }, 
                "logical_interface_type": {
                    "type": "string", 
                    "description": "Logical interface type can be L2 or L3.\n L2 - only L2 service is provided, MAC learning is supported.\n L3 - only L3 service is supported and MAC learning is not supported."
                }, 
                "virtual_machine_interface_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }
                    ]
                }, 
                "perms2": {
                    "description": "Permissions data for role based access.", 
                    "$ref": "#/definitions/PermType2"
                }, 
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.", 
                    "$ref": "#/definitions/IdPermsType"
                }
            }
        }, 
        "AllowedAddressPairs": {
            "properties": {
                "allowed_address_pair": {
                    "$ref": "#/definitions/AllowedAddressPair"
                }
            }
        }, 
        "FloatingIpCreate": {
            "required": [
                "fq_name", 
                "floating_ip_address", 
                "project_refs"
            ], 
            "properties": {
                "project_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "fq_name": {
                    "$ref": "#/definitions/FQName"
                }, 
                "virtual_machine_interface_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "floating_ip_is_virtual_ip": {
                    "type": "boolean", 
                    "description": "This floating ip is used as virtual ip (VIP) in case of LBaaS."
                }, 
                "floating_ip_address": {
                    "type": "string", 
                    "description": "Floating ip address."
                }, 
                "floating_ip_address_family": {
                    "type": "string", 
                    "description": "Ip address family of the floating ip, IpV4 or IpV6"
                }, 
                "floating_ip_fixed_ip_address": {
                    "type": "string", 
                    "description": "This floating is tracking given fixed ip of the interface. The given fixed ip is used in 1:1 NAT."
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }
            }
        }, 
        "KeyValuePairs": {
            "properties": {
                "key_value_pair": {
                    "$ref": "#/definitions/KeyValuePair"
                }
            }
        }, 
        "LinklocalServicesTypes": {
            "properties": {
                "linklocal_service_entry": {
                    "description": "List of link local services", 
                    "$ref": "#/definitions/LinklocalServiceEntryType"
                }
            }
        }, 
        "ApiAccessType": {
            "required": [
                "api_name", 
                "permissions"
            ], 
            "properties": {
                "api_name": {
                    "type": "string"
                }, 
                "permissions": {
                    "$ref": "#/definitions/PermType"
                }
            }
        }, 
        "AttachmentInfoType": {
            "properties": {
                "bgp": {
                    "$ref": "#/definitions/ProtocolBgpType"
                }, 
                "ospf": {
                    "$ref": "#/definitions/ProtocolOspfType"
                }, 
                "state": {
                    "type": "string"
                }, 
                "static": {
                    "$ref": "#/definitions/ProtocolStaticType"
                }
            }
        }, 
        "PolicyBasedForwardingRuleType": {
            "properties": {
                "dst_mac": {
                    "type": "string"
                }, 
                "protocol": {
                    "type": "string"
                }, 
                "ipv6_service_chain_address": {
                    "type": "string", 
                    "description": "String of standard notation of ipv4 or ipv6 address"
                }, 
                "direction": {
                    "type": "string"
                }, 
                "mpls_label": {
                    "type": "integer"
                }, 
                "vlan_tag": {
                    "type": "integer"
                }, 
                "src_mac": {
                    "type": "string"
                }, 
                "service_chain_address": {
                    "type": "string"
                }
            }
        }, 
        "VirtualIpRead": {
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "loadbalancer_pool_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }
                    ]
                }, 
                "perms2": {
                    "description": "Permissions data for role based access.", 
                    "$ref": "#/definitions/PermType2"
                }, 
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.", 
                    "$ref": "#/definitions/IdPermsType"
                }, 
                "virtual_machine_interface_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }
                    ]
                }, 
                "virtual_ip_properties": {
                    "$ref": "#/definitions/VirtualIpType"
                }
            }
        }, 
        "UserCredentials": {
            "properties": {
                "username": {
                    "type": "string"
                }, 
                "password": {
                    "type": "string"
                }
            }
        }, 
        "VirtualNetworkCreate": {
            "required": [
                "fq_name", 
                "network_ipam_refs"
            ], 
            "properties": {
                "virtual_network_properties": {
                    "description": "Virtual network miscelenious configurations.", 
                    "$ref": "#/definitions/VirtualNetworkType"
                }, 
                "ecmp_hashing_include_fields": {
                    "description": "ECMP hashing config at global level.", 
                    "$ref": "#/definitions/EcmpHashingIncludeFields"
                }, 
                "fq_name": {
                    "$ref": "#/definitions/FQName"
                }, 
                "virtual_network_network_id": {
                    "type": "number", 
                    "description": "System assigned unique 32 bit ID for every virtual network."
                }, 
                "network_policy_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }, 
                        {
                            "properties": {
                                "attr": {
                                    "$ref": "#/definitions/VirtualNetworkPolicyType"
                                }
                            }
                        }
                    ]
                }, 
                "router_external": {
                    "type": "boolean", 
                    "description": "When true, this virtual network is openstack router external network."
                }, 
                "import_route_target_list": {
                    "description": "List of route targets that are used as import for this virtual network.", 
                    "$ref": "#/definitions/RouteTargetList"
                }, 
                "route_table_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "provider_properties": {
                    "description": "Virtual network is provider network. Specifies VLAN tag and physical network name.", 
                    "$ref": "#/definitions/ProviderDetails"
                }, 
                "qos_config_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "route_target_list": {
                    "description": "List of route targets that are used as both import and export for this virtual network.", 
                    "$ref": "#/definitions/RouteTargetList"
                }, 
                "export_route_target_list": {
                    "description": "List of route targets that are used as export for this virtual network.", 
                    "$ref": "#/definitions/RouteTargetList"
                }, 
                "flood_unknown_unicast": {
                    "type": "boolean", 
                    "description": "When true, packets with unknown unicast MAC addres are flooded within the network. Default they are\ndropped."
                }, 
                "network_ipam_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }, 
                        {
                            "properties": {
                                "attr": {
                                    "$ref": "#/definitions/VnSubnetsType"
                                }
                            }
                        }
                    ]
                }, 
                "external_ipam": {
                    "type": "boolean", 
                    "description": "IP address assignment to VM is done statically, outside of (external to) Contrail Ipam. vCenter only\nfeature."
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "multi_policy_service_chains_enabled": {
                    "type": "boolean", 
                    "description": "Allow multiple service chains within same two networks based on network policy.\nCurrent limitation is that both networks must reside within cluster, except when right most service\nis NAT."
                }, 
                "is_shared": {
                    "type": "boolean", 
                    "description": "When true, this virtual network is shared with all tenants."
                }
            }
        }, 
        "AliasIpUpdate": {
            "properties": {
                "project_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "alias_ip_address_family": {
                    "type": "string", 
                    "description": "Ip address family of the alias ip, IpV4 or IpV6"
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "virtual_machine_interface_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }
            }
        }, 
        "RbacRuleType": {
            "required": [
                "rule_object", 
                "rule_perms"
            ], 
            "properties": {
                "rule_object": {
                    "type": "string", 
                    "description": "Name of the REST API (object) for this rule, * represent all objects"
                }, 
                "rule_perms": {
                    "description": "List of [(role, permissions),...]", 
                    "$ref": "#/definitions/RbacPermType"
                }, 
                "rule_field": {
                    "type": "string", 
                    "description": "Name of the level one field (property) for this object, * represent all\nproperties"
                }
            }
        }, 
        "QosConfigCreate": {
            "required": [
                "fq_name"
            ], 
            "properties": {
                "qos_config_type": {
                    "type": "string"
                }, 
                "vlan_priority_entries": {
                    "$ref": "#/definitions/QosIdForwardingClassPairs"
                }, 
                "fq_name": {
                    "$ref": "#/definitions/FQName"
                }, 
                "default_forwarding_class_id": {
                    "type": "number"
                }, 
                "mpls_exp_entries": {
                    "$ref": "#/definitions/QosIdForwardingClassPairs"
                }, 
                "dscp_entries": {
                    "$ref": "#/definitions/QosIdForwardingClassPairs"
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }
            }
        }, 
        "LogicalInterfaceCreate": {
            "required": [
                "fq_name"
            ], 
            "properties": {
                "logical_interface_vlan_tag": {
                    "type": "number", 
                    "description": "VLAN tag (.1Q) classifier for this logical interface."
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "fq_name": {
                    "$ref": "#/definitions/FQName"
                }, 
                "virtual_machine_interface_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "logical_interface_type": {
                    "type": "string", 
                    "description": "Logical interface type can be L2 or L3.\n L2 - only L2 service is provided, MAC learning is supported.\n L3 - only L3 service is supported and MAC learning is not supported."
                }
            }
        }, 
        "ServiceInterfaceTag": {
            "properties": {
                "interface_type": {
                    "type": "string"
                }
            }
        }, 
        "BgpFamilyAttributes": {
            "properties": {
                "prefix_limit": {
                    "$ref": "#/definitions/BgpPrefixLimit"
                }, 
                "loop_count": {
                    "type": "integer"
                }, 
                "address_family": {
                    "type": "string"
                }
            }
        }, 
        "RbacPermType": {
            "required": [
                "role_name", 
                "role_crud"
            ], 
            "properties": {
                "role_crud": {
                    "type": "string", 
                    "description": "String CRUD representing permissions for C=create, R=read, U=update, D=delete."
                }, 
                "role_name": {
                    "type": "string", 
                    "description": "Name of the role"
                }
            }
        }, 
        "VirtualMachineInterfaceUpdate": {
            "properties": {
                "virtual_machine_interface_disable_policy": {
                    "type": "boolean", 
                    "description": "When True all policy checks for ingress and egress traffic from this interface are disabled. Flow\ntable entries are not created."
                }, 
                "routing_instance_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }, 
                        {
                            "properties": {
                                "attr": {
                                    "$ref": "#/definitions/PolicyBasedForwardingRuleType"
                                }
                            }
                        }
                    ]
                }, 
                "virtual_machine_interface_mac_addresses": {
                    "description": "MAC address of the virtual machine interface, automatically assigned by system if not provided.", 
                    "$ref": "#/definitions/MacAddressesType"
                }, 
                "virtual_machine_interface_bindings": {
                    "description": "Dictionary of arbitrary (key, value) for this interface. Neutron port bindings use this.", 
                    "$ref": "#/definitions/KeyValuePairs"
                }, 
                "interface_route_table_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "qos_config_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "virtual_machine_interface_device_owner": {
                    "type": "string", 
                    "description": "For openstack compatibility, not used by system."
                }, 
                "service_health_check_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "security_group_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "physical_interface_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "port_tuple_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "virtual_network_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "virtual_machine_interface_properties": {
                    "description": "Virtual Machine Interface miscelenious configurations.", 
                    "$ref": "#/definitions/VirtualMachineInterfacePropertiesType"
                }, 
                "ecmp_hashing_include_fields": {
                    "description": "ECMP hashing config at global level.", 
                    "$ref": "#/definitions/EcmpHashingIncludeFields"
                }, 
                "virtual_machine_interface_host_routes": {
                    "description": "List of host routes(prefixes, nexthop) that are passed to VM via DHCP.", 
                    "$ref": "#/definitions/RouteTableType"
                }, 
                "virtual_machine_interface_allowed_address_pairs": {
                    "description": "List of (IP address, MAC) other than instance ip on this interface.", 
                    "$ref": "#/definitions/AllowedAddressPairs"
                }, 
                "virtual_machine_interface_fat_flow_protocols": {
                    "description": "List of (protocol, port number), for flows to interface with (protocol, destination port number),\nvrouter will ignore source port while setting up flow and ignore it as source port in reverse flow.\nHence many flows will map to single flow.", 
                    "$ref": "#/definitions/FatFlowProtocols"
                }, 
                "virtual_machine_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "vrf_assign_table": {
                    "description": "VRF assignment policy for this interface, automatically generated by system.", 
                    "$ref": "#/definitions/VrfAssignTableType"
                }, 
                "virtual_machine_interface_dhcp_option_list": {
                    "description": "DHCP options configuration specific to this interface.", 
                    "$ref": "#/definitions/DhcpOptionsListType"
                }, 
                "virtual_machine_interface_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }
            }
        }, 
        "LoadbalancerCreate": {
            "required": [
                "fq_name"
            ], 
            "properties": {
                "loadbalancer_provider": {
                    "type": "string"
                }, 
                "fq_name": {
                    "$ref": "#/definitions/FQName"
                }, 
                "virtual_machine_interface_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "loadbalancer_properties": {
                    "$ref": "#/definitions/LoadbalancerType"
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "service_instance_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }
            }
        }, 
        "RouteType": {
            "properties": {
                "prefix": {
                    "type": "string", 
                    "description": "Ip prefix/len format prefix"
                }, 
                "next_hop": {
                    "type": "string", 
                    "description": "Ip address or service instance name."
                }, 
                "community_attributes": {
                    "$ref": "#/definitions/CommunityAttributes"
                }, 
                "next_hop_type": {
                    "type": "string"
                }
            }
        }, 
        "RouteTableUpdate": {
            "properties": {
                "routes": {
                    "description": "Routes in the route table are configured in following way.", 
                    "$ref": "#/definitions/RouteTableType"
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }
            }
        }, 
        "LoadbalancerPoolUpdate": {
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "service_appliance_set_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "virtual_machine_interface_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "loadbalancer_pool_provider": {
                    "type": "string"
                }, 
                "loadbalancer_listener_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "loadbalancer_pool_properties": {
                    "$ref": "#/definitions/LoadbalancerPoolType"
                }, 
                "service_instance_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "loadbalancer_pool_custom_attributes": {
                    "$ref": "#/definitions/KeyValuePairs"
                }, 
                "loadbalancer_healthmonitor_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }
            }
        }, 
        "VirtualDnsRecordUpdate": {
            "properties": {
                "virtual_DNS_record_data": {
                    "description": "DNS record data has configuration like type, name, ip address, loadbalancing etc.", 
                    "$ref": "#/definitions/VirtualDnsRecordType"
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }
            }
        }, 
        "InstanceIpUpdate": {
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "service_health_check_ip": {
                    "type": "boolean", 
                    "description": "This instance ip is used as service health check source ip"
                }, 
                "secondary_ip_tracking_ip": {
                    "description": "When this instance ip is secondary ip, it can track activeness of another ip.", 
                    "$ref": "#/definitions/SubnetType"
                }, 
                "instance_ip_address": {
                    "type": "string", 
                    "description": "Ip address value for instance ip."
                }, 
                "virtual_machine_interface_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "instance_ip_mode": {
                    "type": "string", 
                    "description": "Ip address HA mode in case this instance ip is used in more than one interface, active-Active or\nactive-Standby."
                }, 
                "instance_ip_family": {
                    "type": "string", 
                    "description": "Ip address family for instance ip, IPv4(v4) or IPv6(v6)."
                }, 
                "service_instance_ip": {
                    "type": "boolean", 
                    "description": "This instance ip is used as service chain next hop"
                }, 
                "physical_router_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "virtual_network_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "instance_ip_secondary": {
                    "type": "boolean", 
                    "description": "This instance ip is secondary ip of the interface."
                }
            }
        }, 
        "EncapsulationPrioritiesType": {
            "properties": {
                "encapsulation": {
                    "type": "string", 
                    "description": "Ordered list of encapsulation types to be used in priority"
                }
            }
        }, 
        "GlobalSystemConfigRead": {
            "properties": {
                "config_version": {
                    "type": "string", 
                    "description": "Version of OpenContrail software that generated this config."
                }, 
                "user_defined_counter": {
                    "description": "counter name and patterns", 
                    "$ref": "#/definitions/UserDefinedCounterList"
                }, 
                "alarm_enable": {
                    "type": "boolean", 
                    "description": "Flag to enable/disable alarms configured under global-system-config. True, if not set."
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "graceful_restart_params": {
                    "description": "Graceful Restart parameters", 
                    "$ref": "#/definitions/GracefulRestartType"
                }, 
                "plugin_tuning": {
                    "description": "Various Orchestration system plugin(interface) parameters, like Openstack Neutron plugin.", 
                    "$ref": "#/definitions/PluginProperties"
                }, 
                "perms2": {
                    "description": "Permissions data for role based access.", 
                    "$ref": "#/definitions/PermType2"
                }, 
                "ibgp_auto_mesh": {
                    "type": "boolean", 
                    "description": "When true, system will automatically create BGP peering mesh with all control-nodes that have same\nBGP AS number as global AS number."
                }, 
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.", 
                    "$ref": "#/definitions/IdPermsType"
                }, 
                "bgp_router_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }
                    ]
                }, 
                "ip_fabric_subnets": {
                    "description": "List of all subnets in which vrouter ip address exist. Used by Device manager to configure dynamic\nGRE tunnels on the SDN gateway.", 
                    "$ref": "#/definitions/SubnetListType"
                }, 
                "autonomous_system": {
                    "minimum": 1, 
                    "type": "number", 
                    "maximum": 65534, 
                    "description": "16 bit BGP Autonomous System number for the cluster."
                }
            }
        }, 
        "VirtualDnsUpdate": {
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "virtual_DNS_data": {
                    "description": "Virtua DNS data has configuration for virtual DNS like domain, dynamic records etc.", 
                    "$ref": "#/definitions/VirtualDnsType"
                }
            }
        }, 
        "ServiceHealthCheckUpdate": {
            "properties": {
                "service_health_check_properties": {
                    "description": "Service health check has following fields.", 
                    "$ref": "#/definitions/ServiceHealthCheckType"
                }, 
                "service_instance_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }, 
                        {
                            "properties": {
                                "attr": {
                                    "$ref": "#/definitions/ServiceInterfaceTag"
                                }
                            }
                        }
                    ]
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }
            }
        }, 
        "RoutingPolicyServiceInstanceType": {
            "properties": {
                "right_sequence": {
                    "type": "string"
                }, 
                "left_sequence": {
                    "type": "string"
                }
            }
        }, 
        "LoadbalancerPoolRead": {
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "service_appliance_set_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }
                    ]
                }, 
                "virtual_machine_interface_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }
                    ]
                }, 
                "loadbalancer_pool_provider": {
                    "type": "string"
                }, 
                "loadbalancer_listener_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }
                    ]
                }, 
                "perms2": {
                    "description": "Permissions data for role based access.", 
                    "$ref": "#/definitions/PermType2"
                }, 
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.", 
                    "$ref": "#/definitions/IdPermsType"
                }, 
                "loadbalancer_pool_properties": {
                    "$ref": "#/definitions/LoadbalancerPoolType"
                }, 
                "service_instance_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }
                    ]
                }, 
                "loadbalancer_pool_custom_attributes": {
                    "$ref": "#/definitions/KeyValuePairs"
                }, 
                "loadbalancer_healthmonitor_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }
                    ]
                }
            }
        }, 
        "AliasIpPoolUpdate": {
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }
            }
        }, 
        "AllocationPoolType": {
            "properties": {
                "start": {
                    "type": "string"
                }, 
                "end": {
                    "type": "string"
                }
            }
        }, 
        "VnSubnetsType": {
            "properties": {
                "ipam_subnets": {
                    "$ref": "#/definitions/IpamSubnetType"
                }, 
                "host_routes": {
                    "description": "Common host routes to be sent via DHCP for VM(s) in all the subnets, Next hop\nfor these routes is always default gateway", 
                    "$ref": "#/definitions/RouteTableType"
                }
            }
        }, 
        "ForwardingClassUpdate": {
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "qos_queue_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "forwarding_class_vlan_priority": {
                    "type": "number", 
                    "description": "802.1p value to be written on outgoing packet for this forwarding-class."
                }, 
                "forwarding_class_mpls_exp": {
                    "type": "number", 
                    "description": "MPLS exp value to be written on outgoing packet for this forwarding-class."
                }, 
                "forwarding_class_id": {
                    "type": "number", 
                    "description": "Unique ID for this forwarding class."
                }, 
                "forwarding_class_dscp": {
                    "type": "number", 
                    "description": "DSCP value to be written on outgoing packet for this forwarding-class."
                }
            }
        }, 
        "VirtualMachineUpdate": {
            "properties": {
                "service_instance_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }
            }
        }, 
        "ProjectRead": {
            "properties": {
                "alias_ip_pool_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }
                    ]
                }, 
                "floating_ip_pool_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }
                    ]
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "quota": {
                    "description": "Max instances limits for various objects under project.", 
                    "$ref": "#/definitions/QuotaType"
                }, 
                "alarm_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }
                    ]
                }, 
                "namespace_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceRead"
                        }, 
                        {
                            "properties": {
                                "attr": {
                                    "$ref": "#/definitions/SubnetType"
                                }
                            }
                        }
                    ]
                }, 
                "perms2": {
                    "description": "Permissions data for role based access.", 
                    "$ref": "#/definitions/PermType2"
                }, 
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.", 
                    "$ref": "#/definitions/IdPermsType"
                }, 
                "alarm_enable": {
                    "type": "boolean", 
                    "description": "Flag to enable/disable alarms configured under global-system-config. True, if not set."
                }
            }
        }, 
        "TermMatchConditionType": {
            "properties": {
                "prefix": {
                    "$ref": "#/definitions/PrefixMatchType"
                }, 
                "protocol": {
                    "type": "string"
                }, 
                "community": {
                    "type": "string"
                }
            }
        }, 
        "VirtualMachineInterfaceCreate": {
            "required": [
                "fq_name", 
                "virtual_machine_interface_mac_addresses", 
                "virtual_network_refs"
            ], 
            "properties": {
                "physical_interface_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "routing_instance_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }, 
                        {
                            "properties": {
                                "attr": {
                                    "$ref": "#/definitions/PolicyBasedForwardingRuleType"
                                }
                            }
                        }
                    ]
                }, 
                "virtual_machine_interface_mac_addresses": {
                    "description": "MAC address of the virtual machine interface, automatically assigned by system if not provided.", 
                    "$ref": "#/definitions/MacAddressesType"
                }, 
                "virtual_machine_interface_bindings": {
                    "description": "Dictionary of arbitrary (key, value) for this interface. Neutron port bindings use this.", 
                    "$ref": "#/definitions/KeyValuePairs"
                }, 
                "interface_route_table_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "qos_config_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "virtual_machine_interface_device_owner": {
                    "type": "string", 
                    "description": "For openstack compatibility, not used by system."
                }, 
                "service_health_check_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "fq_name": {
                    "$ref": "#/definitions/FQName"
                }, 
                "security_group_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "virtual_machine_interface_disable_policy": {
                    "type": "boolean", 
                    "description": "When True all policy checks for ingress and egress traffic from this interface are disabled. Flow\ntable entries are not created."
                }, 
                "port_tuple_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "virtual_network_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "virtual_machine_interface_properties": {
                    "description": "Virtual Machine Interface miscelenious configurations.", 
                    "$ref": "#/definitions/VirtualMachineInterfacePropertiesType"
                }, 
                "ecmp_hashing_include_fields": {
                    "description": "ECMP hashing config at global level.", 
                    "$ref": "#/definitions/EcmpHashingIncludeFields"
                }, 
                "virtual_machine_interface_host_routes": {
                    "description": "List of host routes(prefixes, nexthop) that are passed to VM via DHCP.", 
                    "$ref": "#/definitions/RouteTableType"
                }, 
                "virtual_machine_interface_allowed_address_pairs": {
                    "description": "List of (IP address, MAC) other than instance ip on this interface.", 
                    "$ref": "#/definitions/AllowedAddressPairs"
                }, 
                "virtual_machine_interface_fat_flow_protocols": {
                    "description": "List of (protocol, port number), for flows to interface with (protocol, destination port number),\nvrouter will ignore source port while setting up flow and ignore it as source port in reverse flow.\nHence many flows will map to single flow.", 
                    "$ref": "#/definitions/FatFlowProtocols"
                }, 
                "virtual_machine_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "vrf_assign_table": {
                    "description": "VRF assignment policy for this interface, automatically generated by system.", 
                    "$ref": "#/definitions/VrfAssignTableType"
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "virtual_machine_interface_dhcp_option_list": {
                    "description": "DHCP options configuration specific to this interface.", 
                    "$ref": "#/definitions/DhcpOptionsListType"
                }, 
                "virtual_machine_interface_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }
            }
        }, 
        "VirtualDnsRecordRead": {
            "properties": {
                "virtual_DNS_record_data": {
                    "description": "DNS record data has configuration like type, name, ip address, loadbalancing etc.", 
                    "$ref": "#/definitions/VirtualDnsRecordType"
                }, 
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.", 
                    "$ref": "#/definitions/IdPermsType"
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "perms2": {
                    "description": "Permissions data for role based access.", 
                    "$ref": "#/definitions/PermType2"
                }
            }
        }, 
        "RouteAggregateCreate": {
            "required": [
                "fq_name"
            ], 
            "properties": {
                "routing_instance_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }
                    ]
                }, 
                "aggregate_route_nexthop": {
                    "type": "string"
                }, 
                "fq_name": {
                    "$ref": "#/definitions/FQName"
                }, 
                "aggregate_route_entries": {
                    "$ref": "#/definitions/RouteListType"
                }, 
                "service_instance_refs": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ResourceReferenceCreate"
                        }, 
                        {
                            "properties": {
                                "attr": {
                                    "$ref": "#/definitions/ServiceInterfaceTag"
                                }
                            }
                        }
                    ]
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }
            }
        }, 
        "AnalyticsNodeCreate": {
            "required": [
                "fq_name"
            ], 
            "properties": {
                "analytics_node_ip_address": {
                    "type": "string", 
                    "description": "Ip address of the analytics node, set while provisioning."
                }, 
                "fq_name": {
                    "$ref": "#/definitions/FQName"
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }
            }
        }, 
        "AnalyticsNodeUpdate": {
            "properties": {
                "analytics_node_ip_address": {
                    "type": "string", 
                    "description": "Ip address of the analytics node, set while provisioning."
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }
            }
        }, 
        "ApiAccessListUpdate": {
            "properties": {
                "api_access_list_entries": {
                    "description": "List of rules e.g network.* => admin:CRUD (admin can perform all ops on networks).", 
                    "$ref": "#/definitions/RbacRuleEntriesType"
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }
            }
        }, 
        "AuthenticationKeyItem": {
            "properties": {
                "key_id": {
                    "type": "integer"
                }, 
                "key": {
                    "type": "string"
                }
            }
        }, 
        "AccessControlListCreate": {
            "required": [
                "fq_name"
            ], 
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "fq_name": {
                    "$ref": "#/definitions/FQName"
                }, 
                "access_control_list_entries": {
                    "description": "Automatically generated by system based on security groups or network policies.", 
                    "$ref": "#/definitions/AclEntriesType"
                }
            }
        }, 
        "AlarmUpdate": {
            "properties": {
                "alarm_rules": {
                    "description": "Rules based on the UVE attributes specified as OR-of-ANDs of AlarmExpression template. Example:\n\"alarm_rules\": {\"or_list\": [{\"and_list\": [{AlarmExpression1}, {AlarmExpression2}, ...]},\n{\"and_list\": [{AlarmExpression3}, {AlarmExpression4}, ...]}]}", 
                    "$ref": "#/definitions/AlarmOrList"
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name."
                }, 
                "uve_keys": {
                    "type": "string", 
                    "description": "List of UVE tables or UVE objects where this alarm config should be applied. For example, rules\nbased on NodeStatus UVE can be applied to multiple object types such as analytics-node, config-node,\ncontrol-node, etc., Alarm config may also be applied to specific objects that can be specified as\n<uve-table-name>.<uve-name>"
                }, 
                "alarm_severity": {
                    "minimum": 0, 
                    "type": "number", 
                    "maximum": 7, 
                    "description": "Severity level for the alarm."
                }
            }
        }, 
        "RbacRuleEntriesType": {
            "properties": {
                "rbac_rule": {
                    "$ref": "#/definitions/RbacRuleType"
                }
            }
        }, 
        "ResourceWithParent": {
            "allOf": [
                {
                    "$ref": "#/definitions/ResourceCommon"
                }, 
                {
                    "properties": {
                        "parent_type": {
                            "type": "string"
                        }, 
                        "parent_uuid": {
                            "type": "string", 
                            "format": "uuid"
                        }
                    }
                }
            ]
        }
    }, 
    "basePath": "/", 
    "swagger": "2.0", 
    "consumes": [
        "application/json"
    ]
}
